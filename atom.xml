<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Don Lex</title>
  
  <subtitle>身体和灵魂总要有一个在路上</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://stormdony.github.io/"/>
  <updated>2018-09-10T03:40:10.560Z</updated>
  <id>https://stormdony.github.io/</id>
  
  <author>
    <name>Don Lex</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python or Java？Boss直聘告诉你该如何选择</title>
    <link href="https://stormdony.github.io/2018/09/10/Python-or-Java%EF%BC%9FBoss%E7%9B%B4%E8%81%98%E5%91%8A%E8%AF%89%E4%BD%A0%E8%AF%A5%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9/"/>
    <id>https://stormdony.github.io/2018/09/10/Python-or-Java？Boss直聘告诉你该如何选择/</id>
    <published>2018-09-10T03:13:33.000Z</published>
    <updated>2018-09-10T03:40:10.560Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>“人生苦短，我用 Python”，Python 的经典 slogan 讲究争分夺秒，并且在 9月的TIOBE榜中拿下第 3 名宝座。<br><a id="more"></a><br><img src="https://i.loli.net/2018/09/10/5b95e60cf4111.png" alt=""></p><p>今天就试着在Boss直聘网站上爬取python和java的招聘信息，比较一下两个方向的发展钱景，为本科生的就业方向给一个小小的建议</p><h3 id="爬取"><a href="#爬取" class="headerlink" title="爬取"></a>爬取</h3><p>在招聘网站上直接以”本科生”和”java”或”python”作为筛选条件，以广州为例<br><img src="https://i.loli.net/2018/09/10/5b95e64669ff1.png" alt=""><br>爬取招聘的大体信息，具体代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</span><br><span class="line">zhipin = client[<span class="string">'zhipin'</span>]</span><br><span class="line">zhipin_java = zhipin[<span class="string">'zhipin_java'</span>]</span><br><span class="line">zhipin_python = zhipin[<span class="string">'zhipin_python'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.78 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">total_page = <span class="number">11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_info</span><span class="params">(param, data_table)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    根据招聘方向(java或python..)爬取信息存进数据库</span></span><br><span class="line"><span class="string">    :param param: 招聘方向</span></span><br><span class="line"><span class="string">    :param data_table: 数据库表明</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, total_page):</span><br><span class="line">        url = <span class="string">'https://www.zhipin.com/c101280100/d_203-h_101280100/?query=&#123;0&#125;&amp;page=&#123;1&#125;'</span>.format(</span><br><span class="line">            param, i)</span><br><span class="line">        web_data = requests.get(url, headers=headers)</span><br><span class="line">        soup = BeautifulSoup(web_data.content, <span class="string">'lxml'</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> soup.select(<span class="string">'#main &gt; div &gt; div.job-list &gt; ul &gt; li'</span>):</span><br><span class="line">            <span class="comment"># 招聘要求</span></span><br><span class="line">            job_title = item.select(<span class="string">'.job-title'</span>)[<span class="number">0</span>].text  <span class="comment"># 岗位</span></span><br><span class="line">            salary = item.select(<span class="string">'.red'</span>)[<span class="number">0</span>].text  <span class="comment"># 薪资</span></span><br><span class="line">            person_info = item.select(<span class="string">'.info-primary p'</span>)[<span class="number">0</span>].text  <span class="comment"># 应聘要求</span></span><br><span class="line">            <span class="comment"># 获取公司信息</span></span><br><span class="line">            company = item.select(<span class="string">'.info-company h3 a'</span>)[<span class="number">0</span>].text  <span class="comment"># 公司</span></span><br><span class="line">            company_info = item.select(<span class="string">'.info-company p'</span>)[<span class="number">0</span>].text  <span class="comment"># 公司信息</span></span><br><span class="line"></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">'job_title'</span>: job_title,</span><br><span class="line">                <span class="string">'salary'</span>: salary,</span><br><span class="line">                <span class="string">'person_info'</span>: person_info,</span><br><span class="line">                <span class="string">'company'</span>: company,</span><br><span class="line">                <span class="string">'company_info'</span>: company_info,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># 插入数据库</span></span><br><span class="line">            data_table.insert(data)</span><br><span class="line">            print(data)</span><br><span class="line">        print(<span class="string">'*'</span> * <span class="number">100</span>)</span><br><span class="line">    print(<span class="string">'\n'</span> * <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    param_list = [<span class="string">'java'</span>, <span class="string">'python'</span>]</span><br><span class="line">    table_list = [zhipin_java, zhipin_python]</span><br><span class="line">    <span class="keyword">for</span> param, table <span class="keyword">in</span> zip(param_list, table_list):</span><br><span class="line">        get_info(param, table)</span><br></pre></td></tr></table></figure></p><p>爬取的信息全部存在mongodb中。便于后面的分析处理</p><h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h3><p>在数据处理这里定义了几个方法，用来处理相应的内容</p><h4 id="1-初始化变量"><a href="#1-初始化变量" class="headerlink" title="1.初始化变量"></a>1.初始化变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">client = pymongo.MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</span><br><span class="line">zhipin = client[<span class="string">'zhipin'</span>]</span><br><span class="line">zhipin_java = zhipin[<span class="string">'zhipin_java'</span>]</span><br><span class="line">zhipin_python = zhipin[<span class="string">'zhipin_python'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar,Line,Pie</span><br></pre></td></tr></table></figure><h4 id="2-获取地区分布情况"><a href="#2-获取地区分布情况" class="headerlink" title="2.获取地区分布情况"></a>2.获取地区分布情况</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_zone</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">''' 获取地区'''</span></span><br><span class="line">    zone_list = []</span><br><span class="line">    real_list = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> zhipin_java.find():</span><br><span class="line">        text = item[<span class="string">'person_info'</span>][<span class="number">3</span>:<span class="number">6</span>]</span><br><span class="line">        zone_list.append(text)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> zone_list:</span><br><span class="line">        j = re.sub(<span class="string">r' \d-'</span>,<span class="string">''</span>,i)</span><br><span class="line">        real_list.append(j)</span><br><span class="line">        <span class="keyword">while</span> <span class="string">''</span> <span class="keyword">in</span> real_list:</span><br><span class="line">            real_list.remove(<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> real_list</span><br><span class="line">zone = dict(Counter(get_zone()))</span><br></pre></td></tr></table></figure><h4 id="3-整理招聘数据"><a href="#3-整理招聘数据" class="headerlink" title="3.整理招聘数据"></a>3.整理招聘数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_key_1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''删除招聘次数为1的岗位'''</span></span><br><span class="line">    li = []</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> job_dict.keys():</span><br><span class="line">        <span class="keyword">if</span> job_dict[key] == <span class="number">1</span>:</span><br><span class="line">            li.append(key)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">        <span class="keyword">del</span> job_dict[i]</span><br><span class="line">    print(job_dict)</span><br></pre></td></tr></table></figure><h4 id="4-整理薪水数据"><a href="#4-整理薪水数据" class="headerlink" title="4.整理薪水数据"></a>4.整理薪水数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_salary</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''获取招聘的工资'''</span></span><br><span class="line">    min_list = [] <span class="comment">#起步工资</span></span><br><span class="line">    max_list = [] <span class="comment">#最高工资</span></span><br><span class="line">    job_title = [] <span class="comment">#岗位</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> zhipin_java.find():</span><br><span class="line">        job_title.append(item[<span class="string">'job_title'</span>])</span><br><span class="line">        salary = item[<span class="string">'salary'</span>]</span><br><span class="line">        min_list.append(int(salary.split(<span class="string">'-'</span>)[<span class="number">0</span>][:<span class="number">-1</span>]))</span><br><span class="line">        max_list.append(int(salary.split(<span class="string">'-'</span>)[<span class="number">1</span>][:<span class="number">-1</span>]))</span><br><span class="line">    <span class="keyword">return</span> min_list,max_list,job_title</span><br></pre></td></tr></table></figure><h3 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h3><h4 id="地区分布"><a href="#地区分布" class="headerlink" title="地区分布"></a>地区分布</h4><p>通过整理地区分布数据,利用pyecharts作图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bar = Bar(<span class="string">"java和python岗位地区分布"</span>)</span><br><span class="line">bar.add(<span class="string">"java"</span>, list(key <span class="keyword">for</span> key <span class="keyword">in</span> zone.keys()), list(value <span class="keyword">for</span> value <span class="keyword">in</span> zone.values()),mark_line=[<span class="string">'min'</span>, <span class="string">'max'</span>], is_toolbox_show = <span class="keyword">True</span>,is_more_utils=<span class="keyword">True</span>)</span><br><span class="line">bar.add(<span class="string">"python"</span>, list(key <span class="keyword">for</span> key <span class="keyword">in</span> py_zone.keys()), list(value <span class="keyword">for</span> value <span class="keyword">in</span> py_zone.values()),mark_line=[<span class="string">'min'</span>, <span class="string">'max'</span>], is_toolbox_show = <span class="keyword">True</span>,is_more_utils=<span class="keyword">True</span>)</span><br><span class="line">bar</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/09/10/5b95e66f0949f.png" alt=""></p><blockquote><p>越靠近城市中心的地区，招聘的岗位就越多，成功应聘的机会较高；番禺和天河区相差较大，其中天河区招python比java将近多8倍；番禺区java比python更加热门，受公司青睐；其他区相差不大</p></blockquote><h4 id="招聘最多的岗位"><a href="#招聘最多的岗位" class="headerlink" title="招聘最多的岗位"></a>招聘最多的岗位</h4><h5 id="python岗位："><a href="#python岗位：" class="headerlink" title="python岗位："></a>python岗位：</h5><p><img src="https://i.loli.net/2018/09/10/5b95e70daabf2.png" alt=""><br><img src="https://i.loli.net/2018/09/10/5b95e71b4caa0.png" alt=""></p><p>占比前五位分别是：</p><ol><li>python工程师</li><li>数据分析师</li><li>运维工程师</li><li>大数据开发工程师</li><li>游戏AI算法工程师</li></ol><h5 id="java岗位对比"><a href="#java岗位对比" class="headerlink" title="java岗位对比"></a>java岗位对比</h5><p><img src="https://i.loli.net/2018/09/10/5b95e6bb57638.png" alt=""><br><img src="https://i.loli.net/2018/09/10/5b95e6ea07956.png" alt=""></p><blockquote><p>高级的工程师招聘的人数较少，大部分都是在招聘初中级工程师，难道这就是传说中的“一个诸葛亮胜过三个臭皮匠 (:”</p></blockquote><h4 id="公司对比"><a href="#公司对比" class="headerlink" title="公司对比"></a>公司对比</h4><h5 id="python招聘公司"><a href="#python招聘公司" class="headerlink" title="python招聘公司"></a>python招聘公司</h5><p><img src="https://i.loli.net/2018/09/10/5b95e74571d86.png" alt=""></p><h5 id="java招聘公司"><a href="#java招聘公司" class="headerlink" title="java招聘公司"></a>java招聘公司</h5><p><img src="https://i.loli.net/2018/09/10/5b95e737d003a.png" alt=""></p><h4 id="最关心的钱途问题"><a href="#最关心的钱途问题" class="headerlink" title="最关心的钱途问题"></a>最关心的钱途问题</h4><h5 id="最高薪水"><a href="#最高薪水" class="headerlink" title="最高薪水"></a>最高薪水</h5><p><img src="https://i.loli.net/2018/09/10/5b95e774a88e8.png" alt="这里写图片描述"></p><blockquote><p>看来python不是吹的，最高薪水也大多数都比java的高;java最高薪水平均19.24K，最低3K，最高50k；python最高薪水平均21.16K,最低3k，最高60k</p></blockquote><h5 id="最低薪水"><a href="#最低薪水" class="headerlink" title="最低薪水"></a>最低薪水</h5><p><img src="https://i.loli.net/2018/09/10/5b95e7613c786.png" alt=""></p><blockquote><p>python起步薪水大多数都比java的高;java平均起步薪水11.42K，python平均起步薪水12.08K</p></blockquote><h4 id="两个岗位词云"><a href="#两个岗位词云" class="headerlink" title="两个岗位词云"></a>两个岗位词云</h4><p><img src="https://i.loli.net/2018/09/10/5b95e78687927.png" alt=""></p><p><img src="https://i.loli.net/2018/09/10/5b95e7950b49c.png" alt=""></p><p>源码：<a href="https://github.com/stormdony/python_demo" target="_blank" rel="noopener">https://github.com/stormdony/python_demo</a></p><p>CSDN博客：<a href="https://blog.csdn.net/stormdony/article/details/82586735" target="_blank" rel="noopener">https://blog.csdn.net/stormdony/article/details/82586735</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps: 原创文章，转载请与作者联系</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;“人生苦短，我用 Python”，Python 的经典 slogan 讲究争分夺秒，并且在 9月的TIOBE榜中拿下第 3 名宝座。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://stormdony.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://stormdony.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>hexo下yilia主题添加字数统计和阅读时长功能</title>
    <link href="https://stormdony.github.io/2018/09/09/hexo%E4%B8%8Byilia%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%92%8C%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF%E5%8A%9F%E8%83%BD/"/>
    <id>https://stormdony.github.io/2018/09/09/hexo下yilia主题添加字数统计和阅读时长功能/</id>
    <published>2018-09-09T07:56:34.000Z</published>
    <updated>2018-09-09T08:12:05.506Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-安装-hexo-wordcount"><a href="#1-安装-hexo-wordcount" class="headerlink" title="1.安装 hexo-wordcount"></a>1.安装 hexo-wordcount</h4><p>在博客目录下打开Git Bash Here 输入命令</p><blockquote><p>npm i –save hexo-wordcount</p></blockquote><a id="more"></a><h4 id="2-文件配置"><a href="#2-文件配置" class="headerlink" title="2.文件配置"></a>2.文件配置</h4><p>在<code>theme\yilia\layout\_partial\post</code>下创建<code>word.ejs</code>文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-top:10px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-time"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-keyboard-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>  字数统计: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">wordcount</span>(<span class="attr">post.content</span>) %&gt;</span>字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-time"</span>&gt;</span></span><br><span class="line">      &amp;nbsp; | &amp;nbsp;</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-hourglass-half"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>  阅读时长: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">min2read</span>(<span class="attr">post.content</span>) %&gt;</span>分<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在 <code>themes/yilia/layout/_partial/article.ejs</code>中添加<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-inner"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">post.link</span> || <span class="attr">post.title</span>)&#123; %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"article-header"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">title</span>', &#123;<span class="attr">class_name:</span> '<span class="attr">article-title</span>'&#125;) %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">post.noDate</span>)&#123; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">date</span>', &#123;<span class="attr">class_name:</span> '<span class="attr">archive-article-date</span>', <span class="attr">date_format:</span> <span class="attr">null</span>&#125;) %&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 需要添加的位置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开始添加字数统计--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">theme.word_count</span> &amp;&amp; !<span class="attr">post.no_word_count</span>)&#123;%&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">post</span>/<span class="attr">word</span>') %&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加完成 --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="3-开启功能"><a href="#3-开启功能" class="headerlink" title="3. 开启功能"></a>3. 开启功能</h4><p>在站点的<code>_config.yml</code>中添加下面代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否开启字数统计</span></span><br><span class="line"><span class="comment">#不需要使用，直接设置值为false，或注释掉</span></span><br><span class="line">word_count: <span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><blockquote><p>ps：原创文章，转载请注明出处</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-安装-hexo-wordcount&quot;&gt;&lt;a href=&quot;#1-安装-hexo-wordcount&quot; class=&quot;headerlink&quot; title=&quot;1.安装 hexo-wordcount&quot;&gt;&lt;/a&gt;1.安装 hexo-wordcount&lt;/h4&gt;&lt;p&gt;在博客目录下打开Git Bash Here 输入命令&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm i –save hexo-wordcount&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="yilia" scheme="https://stormdony.github.io/categories/yilia/"/>
    
    
      <category term="hexo" scheme="https://stormdony.github.io/tags/hexo/"/>
    
      <category term="yilia" scheme="https://stormdony.github.io/tags/yilia/"/>
    
  </entry>
  
  <entry>
    <title>hexo添加和取消live2d看板动画</title>
    <link href="https://stormdony.github.io/2018/09/09/hexo%E6%B7%BB%E5%8A%A0%E5%92%8C%E5%8F%96%E6%B6%88live2d%E7%9C%8B%E6%9D%BF%E5%8A%A8%E7%94%BB/"/>
    <id>https://stormdony.github.io/2018/09/09/hexo添加和取消live2d看板动画/</id>
    <published>2018-09-09T06:31:09.000Z</published>
    <updated>2018-09-09T08:06:32.178Z</updated>
    
    <content type="html"><![CDATA[<h3 id="添加看板娘"><a href="#添加看板娘" class="headerlink" title="添加看板娘"></a>添加看板娘</h3><p>在博客目录下安装依赖</p><blockquote><p>npm install –save hexo-helper-live2d</p></blockquote><a id="more"></a><p>在主题下的<code>_config.yml</code>的配置信息<br>Hexo的 _config.yml 文件添加配置.</p><p>示例:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: false</span><br><span class="line">  debug: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: <span class="number">150</span></span><br><span class="line">    height: <span class="number">300</span></span><br><span class="line">  mobile:</span><br><span class="line">    show: false</span><br></pre></td></tr></table></figure></p><p>使用其他的模型，需要先安装模型,在修改配置信息中的<code>use</code></p><p>查看模型：<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">https://github.com/xiazeyu/live2d-widget-models</a></p><p>截图预览：<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">https://huaji8.top/post/live2d-plugin-2.0/</a></p><p>安装模型</p><blockquote><p>npm install 模型的包名</p></blockquote><p>具体可以查看官方文档：<a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md" target="_blank" rel="noopener">https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md</a></p><h3 id="取消看板娘"><a href="#取消看板娘" class="headerlink" title="取消看板娘"></a>取消看板娘</h3><p>直接运行下面的命令</p><blockquote><p>npm uninstall hexo-helper-live2d</p></blockquote><p>去掉站点<code>_config.yml</code>下的配置信息即可</p><blockquote><p>ps：原创文章，转载请注明出处</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;添加看板娘&quot;&gt;&lt;a href=&quot;#添加看板娘&quot; class=&quot;headerlink&quot; title=&quot;添加看板娘&quot;&gt;&lt;/a&gt;添加看板娘&lt;/h3&gt;&lt;p&gt;在博客目录下安装依赖&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install –save hexo-helper-live2d&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="yilia" scheme="https://stormdony.github.io/categories/yilia/"/>
    
    
      <category term="hexo" scheme="https://stormdony.github.io/tags/hexo/"/>
    
      <category term="yilia" scheme="https://stormdony.github.io/tags/yilia/"/>
    
  </entry>
  
  <entry>
    <title>单选题：安全和便捷，你选哪一个？</title>
    <link href="https://stormdony.github.io/2018/09/07/%E5%8D%95%E9%80%89%E9%A2%98%EF%BC%9A%E5%AE%89%E5%85%A8%E5%92%8C%E4%BE%BF%E6%8D%B7%EF%BC%8C%E4%BD%A0%E9%80%89%E5%93%AA%E4%B8%80%E4%B8%AA%EF%BC%9F/"/>
    <id>https://stormdony.github.io/2018/09/07/单选题：安全和便捷，你选哪一个？/</id>
    <published>2018-09-07T11:07:04.000Z</published>
    <updated>2018-09-09T01:42:04.616Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间的滴滴杀人案可谓是闹得满城风雨，但还是禁不住时间这把杀猪刀，人们的眼球又被“东哥”的案子给吸引过去了。虽然吃瓜看戏不错，但是也要关注一下关乎自身利益的问题。<br><a id="more"></a><br>9月4日晚，滴滴出行宣布将于2018年9月4日启动安全大整治，2018年9月8日23点至9月15日凌晨5点期间在中国大陆地区暂停提供深夜23：00-5：00时间段的网约车。</p><p>这一措施一旦实行，将会在出行和安全方面带来怎样的变化？</p><p>首先很多加班族和夜猫子可能会心慌的一批。深夜刚加完班，公交、地铁都停了，只能在路边使劲摇胳膊喊“师傅”，本来上班的压力就山大了，现在可能还要体验一把抢车风波；而蹦迪的、买醉的还有撸串的出行难度也会增加，最后可能会放弃，选择宅起来。</p><p><img src="https://i.loli.net/2018/09/07/5b925c60961b0.gif"></p><p><span style="color:green; font-size:17px;font-weight:800">1.出行成本</span><br>相对于出租,虽然滴滴价格并没有低太多,但还是便宜一些。并且网约车的接单机制与出租车或者其他的出行方式的不一样。网约车可以自己设定时间，更加迁就自己，不必浪费时间在等车上；而其他的方式则有一定的时间随机性。在时间成本上，网约车的消耗成本就低了很多。</p><p>另外在网约车的市场上，滴滴占了63%的市场份额。而停止深夜服务则会更加加剧出行选择的稀缺性。“物以稀为贵”的道理大家都明白。这样可能不仅是时间和金钱成本上的的增加了。</p><p><span style="color:green; font-size:17px;font-weight:800">2.安全 | 便捷</span><br>滴滴的几次用户遇害案件，使得乘客的警惕意识加强，同时也让社会对网约车的有了防备。很多人虽然也对先前发生的事情义愤填膺，但是经受不了站街摇手苦等，于是会想，滴滴用户量那么大，遭遇不幸的事情总不会落到我头上吧，并且滴滴还上线了“一键报警”功能…</p><p>虽然想象很美好，但是在整改的成效没有体现出来之前，安全和便捷不能同时满足。而滴滴的做法意思就很明显了。我们也只能牺牲便捷来换取安全保障的提高了。</p><p><span style="color:green;font-size:17px;font-weight:800">3.用户心理</span><br>网约车跟私人订制类似，而出租和其他的出行方式是面向大众的。这一区别使得用户的体验感不一样，一个是消费者是上帝（真实是不是这样就另说了），另一个则体现不出个人的与众不同。</p><p>最后试问一句：如果没有安全方面的问题，你愿意在路边苦等出租，还是使用滴滴这样的定制服务？？</p><p>ps：纯属个人看法，有不成熟之处请谅解！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间的滴滴杀人案可谓是闹得满城风雨，但还是禁不住时间这把杀猪刀，人们的眼球又被“东哥”的案子给吸引过去了。虽然吃瓜看戏不错，但是也要关注一下关乎自身利益的问题。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://stormdony.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://stormdony.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>爬虫利器-cURL转换</title>
    <link href="https://stormdony.github.io/2018/09/06/%E7%88%AC%E8%99%AB%E5%88%A9%E5%99%A8-cURL%E8%BD%AC%E6%8D%A2/"/>
    <id>https://stormdony.github.io/2018/09/06/爬虫利器-cURL转换/</id>
    <published>2018-09-06T02:56:02.000Z</published>
    <updated>2018-09-08T15:40:14.836Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在爬虫的过程，经常需要为程序添加请求头，参数，cookie等信息，但是这些信息的添加都需要手动的去浏览器中找，然后一点一点的慢慢复制粘贴，这样效率就非常的低了。今天就分享一个网站，解决这些问题，让你脱离这些没有意义的劳动</p><a id="more"></a> <h3 id="网站介绍"><a href="#网站介绍" class="headerlink" title="网站介绍"></a>网站介绍</h3><p>网址: <strong><a href="https://curl.trillworks.com" target="_blank" rel="noopener">https://curl.trillworks.com</a></strong></p><p><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fuzn5f2wc2j30wi0hpq5v.jpg" with="300" height="300"></p><p>从上图可以看到网站的教程，只要根据教程三步走，就可以快速的添加相应的请求信息</p><h3 id="示范"><a href="#示范" class="headerlink" title="示范"></a>示范</h3><p><img src="https://i.loli.net/2018/09/06/5b909ad7cdda7.gif"></p><p>将需要爬取的请求复制curl到网站中转换，然后复制到pycharm中就可以直接爬取到整个网站的源码了，接下来就可以直接在这个基础上开始逻辑工作了</p><p>生成的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">'_octo'</span>: <span class="string">'GH1.1.681056136.1509806877'</span>,</span><br><span class="line">    <span class="string">'_gat'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'logged_in'</span>: <span class="string">'no'</span>,</span><br><span class="line">    <span class="string">'_ga'</span>: <span class="string">'GA1.2.70269906.1509806877'</span>,</span><br><span class="line">    <span class="string">'tz'</span>: <span class="string">'Asia%2FShanghai'</span>,</span><br><span class="line">    <span class="string">'has_recent_activity'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'_gh_sess'</span>: <span class="string">'cGpmdExmZUZpckZ0R1pSQlFxZlpsS2ZvT3NZbUU0YW1qTVloSzdFeWNxeWdNaGxsNzVveTJ3Vndrc2ZaN3ZoRDNYMm10TW9OdUdGVHhwbVRmMEU3ZWVwTUx4dUpZTUgrbHdKZkV0RnpzN3hodG12TGdLbHpSemVaQ0ZMM201MGdxMlkxdk5JNUZ6em1SWGp5ZEJUYTNQMjRFcCtqUDZaWVVFNXl3VDJRRUU4MFpqYkpvekY1VmZpY2t1R01ZcGRPQlZBUEJUOTJaWnNESjVnMnlkcncyWWhCVDl1OE5aVDhpR2Z4Z1NYVkFVNk5ReDRtTVphOXFXQWJNSVZYcnEyVktLTERLMHBTYjNwa2tUQUJaaWREQ0N4NzJYTG9sM1dpUktPaWFETFVpWGZlWFNvb2ZxazU1OUxMazVjZ3VNNTJteEdENzJPQlFKeDV3YXZCbmdHSGdGVmx5OVNjU2VaZXh3eEVwSlptczZXV3lQZXgrOGEyVGFwcUpPcFhIZTRWaDIwZExMRWhDRE8yMUdJT2xmS1grQ3I3bEYySGJvWFhNTFR3VmNpRnlLTT0tLXlRMmJZanl4Z0tUU0c0N1ZrRHpqbkE9PQ%3D%3D--1899440138004359a97b156d0ac8941135684ab5'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, sdch'</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8'</span>,</span><br><span class="line">    <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'https://ghbtns.com/github-btn.html?user=NickCarneiro&amp;repo=curlconverter&amp;type=watch&amp;count=true&amp;size=large'</span>,</span><br><span class="line">    <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">    <span class="string">'Cache-Control'</span>: <span class="string">'max-age=0'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://github.com/NickCarneiro/curlconverter/'</span>, headers=headers, cookies=cookies)</span><br></pre></td></tr></table></figure></p><p>可以看到生成的代码非常的规整，是不是很方便~~</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在爬虫的过程，经常需要为程序添加请求头，参数，cookie等信息，但是这些信息的添加都需要手动的去浏览器中找，然后一点一点的慢慢复制粘贴，这样效率就非常的低了。今天就分享一个网站，解决这些问题，让你脱离这些没有意义的劳动&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://stormdony.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://stormdony.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://stormdony.github.io/2018/09/05/hello-world/"/>
    <id>https://stormdony.github.io/2018/09/05/hello-world/</id>
    <published>2018-09-05T02:26:45.363Z</published>
    <updated>2018-09-08T15:40:09.894Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to the <strong>DonLex’s blog</strong>. This blog has just been established, so there is few pages, it will be improved gradually.<br>If you get any problems, you can send an E-mail to  <a href="mailto:stormdony@foxmail.com" target="_blank" rel="noopener">stormdony@foxmail.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to the &lt;strong&gt;DonLex’s blog&lt;/strong&gt;. This blog has just been established, so there is few pages, it will be improved gradually.
      
    
    </summary>
    
    
  </entry>
  
</feed>
