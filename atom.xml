<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Don Lex</title>
  
  <subtitle>身体和灵魂总要有一个在路上</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.donlex.cn/"/>
  <updated>2019-08-12T03:20:53.723Z</updated>
  <id>https://www.donlex.cn/</id>
  
  <author>
    <name>Don Lex</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ORACLE统计函数的小知识</title>
    <link href="https://www.donlex.cn/archives/f4645013.html"/>
    <id>https://www.donlex.cn/archives/f4645013.html</id>
    <published>2019-08-12T03:17:34.000Z</published>
    <updated>2019-08-12T03:20:53.723Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --><h3 id="Group-by-函数"><a href="#Group-by-函数" class="headerlink" title="Group by 函数"></a>Group by 函数</h3><p>在使用oracle进行sql统计的时候，需要对单个字段进行统计，但是统计的信息中需要将该表中的其他字段的信息也显示出来，但是只对需要的单一字段进行<code>group by</code>的话会出现 <code>ORA-00979: 不是 GROUP BY 表达式</code> 的报错信息。因为<strong>在 <code>select</code> 中出现的列必须全部出现在 <code>group by</code> 的后面</strong><br><a id="more"></a><br>举个例子：<br>假设有一张商品product表，有id，category，pro_name，status。现在需要统计status为1的数据，并且需要按照category分类和显示所有列的信息。<br><strong>错误示范：</strong><br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,pro_name, <span class="keyword">count</span>(<span class="keyword">status</span>) <span class="keyword">as</span> <span class="keyword">success</span> <span class="keyword">from</span> product <span class="keyword">where</span> <span class="keyword">status</span> = <span class="number">1</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">category</span></span><br></pre></td></tr></table></figure><p></p><p>因为<code>group by</code> 没有对id，pro_name等数据列进行分组，所以会出现<strong><code>ORA-00979: 不是 GROUP BY 表达式</code></strong> 的错误信息</p><p>正确操作：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,pro_name, <span class="keyword">count</span>(<span class="keyword">status</span>) <span class="keyword">as</span> <span class="keyword">success</span> <span class="keyword">from</span> product <span class="keyword">where</span> <span class="keyword">status</span> = <span class="number">1</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">category</span>,<span class="keyword">id</span>,pro_name</span><br></pre></td></tr></table></figure><p></p><p>另外，如果需要对统计的数据进行保留两位小数这样的功能和把统计结果 中<code>null</code> 值设置为0，可以分别使用<code>CAST</code>和<code>NVL</code>函数直接在SQL中进行处理。</p><h3 id="CAST函数"><a href="#CAST函数" class="headerlink" title="CAST函数"></a>CAST函数</h3><p><code>CAST (expression AS data_type)</code></p><p>参数说明：</p><ol><li><code>expression</code>：任何有效的SQServer表达式。</li><li><code>AS</code>：用于分隔两个参数，在AS之前的是要处理的数据，在AS之后是要转换的数据类型。</li><li><code>data_type</code>：目标系统所提供的数据类型，包括bigint和sql_variant，不能使用用户定义的数据类型。</li></ol><p>所以可以用<code>cast（value as number(10,2)</code>来转换。如果通过<code>CAST()</code>函数将这个值转换为number类型，需要首先定义number值的精度与小数位数。这里的精度与小数位数分别为10与2,精度是总的数字位数，包括小数点左边和右边位数的总和。而小数位数是小数点右边的位数。这表示本例能够支持的最大的整数值是9999999，而最小的小数是0.01。</p><h3 id="NVL函数"><a href="#NVL函数" class="headerlink" title="NVL函数"></a>NVL函数</h3><p><code>NVL(eExpression1, eExpression2)</code></p><p>参数解释：<br>如果<code>eExpression1</code>的计算结果为 null 值，则 <code>NVL( )</code> 返回 <code>eExpression2</code>。如果<code>eExpression1</code> 的计算结果不是 null 值，则返回<code>eExpression1</code>。</p><p>例如：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,pro_name, NVL(<span class="keyword">count</span>(<span class="keyword">status</span>),<span class="number">0</span>) <span class="keyword">as</span> <span class="keyword">success</span> <span class="keyword">from</span> product <span class="keyword">where</span> <span class="keyword">status</span> = <span class="number">1</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">category</span>,<span class="keyword">id</span>,pro_name</span><br></pre></td></tr></table></figure><p></p><h3 id="ROUND函数"><a href="#ROUND函数" class="headerlink" title="ROUND函数"></a>ROUND函数</h3><p><code>ROUND（number[,decimals]）</code></p><p>参数解释：<br>number： 待做截取处理的数值<br>decimals： 指明需保留小数点后面的位数。可选项，忽略它则截去所有的小数部分，并四舍五入。如果为负数则表示从小数点开始左边的位数，相应整数数字用0填充，小数被去掉。<strong>另外如果number中的为整数，number将不会保留两位小数。</strong>所以需要保留两位小数还是使用<code>CAST</code>函数比较好<br>例如：<code>ROUND（3.0,2]）</code>会被截取为3，而不会填充为3.00</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;Group-by-函数&quot;&gt;&lt;a href=&quot;#Group-by-函数&quot; class=&quot;headerlink&quot; title=&quot;Group by 函数&quot;&gt;&lt;/a&gt;Group by 函数&lt;/h3&gt;&lt;p&gt;在使用oracle进行sql统计的时候，需要对单个字段进行统计，但是统计的信息中需要将该表中的其他字段的信息也显示出来，但是只对需要的单一字段进行&lt;code&gt;group by&lt;/code&gt;的话会出现 &lt;code&gt;ORA-00979: 不是 GROUP BY 表达式&lt;/code&gt; 的报错信息。因为&lt;strong&gt;在 &lt;code&gt;select&lt;/code&gt; 中出现的列必须全部出现在 &lt;code&gt;group by&lt;/code&gt; 的后面&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Oracle" scheme="https://www.donlex.cn/tags/Oracle/"/>
    
      <category term="SQL" scheme="https://www.donlex.cn/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>微信自动回复机器人</title>
    <link href="https://www.donlex.cn/archives/67261aff.html"/>
    <id>https://www.donlex.cn/archives/67261aff.html</id>
    <published>2019-07-04T13:10:32.000Z</published>
    <updated>2019-07-04T13:21:04.400Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Aug 12 2019 11:22:00 GMT+0800 (GMT+08:00) --><p>通过<code>itchat</code>获取微信的相关消息，将微信消息传输到<strong>青云客</strong>机器人接口，获取机器人的返回消息。将返回消息返回给微信消息的发送人。以此实现将微信个人号变身为聊天机器人。<br><a id="more"></a><br>因为<a href="http://www.turingapi.com" target="_blank" rel="noopener">图灵机器人</a>现在需要实名认证，并每天免费数量只有100条，感觉非常麻烦，所以找了一个免费的接口-<strong><a href="http://api.qingyunke.com/" target="_blank" rel="noopener">青云客</a></strong>，虽然这个智能程度没有图灵机器人那么高，但是也足够应付基本的消息了，不过有时候有点智障，<strong>谨慎使用哈</strong>。</p><p>以下是接口说明：</p><p><img src="https://i.loli.net/2019/07/04/5d1df6fdad7a558919.png"></p><h2 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h2><p>需要安装以下python库才能够跑起来</p><ol><li>itchat</li><li>requests</li></ol><h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2019/7/3 14:23</span></span><br><span class="line"><span class="comment"># @Author  : donlex</span></span><br><span class="line"><span class="comment"># @Email   : donlex@qq.com</span></span><br><span class="line"><span class="comment"># @Software: PyCharm 2018.1.4 (Professional Edition)</span></span><br><span class="line"><span class="keyword">import</span> itchat</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_response</span><span class="params">(msg)</span>:</span></span><br><span class="line">    apiUrl = <span class="string">'http://api.qingyunke.com/api.php?key=free&amp;appid=0&amp;msg=&#123;&#125;'</span>.format(</span><br><span class="line">        msg)</span><br><span class="line">    <span class="comment"># 发送post请求</span></span><br><span class="line">    r = requests.post(apiUrl).json()</span><br><span class="line">    <span class="comment"># 替换br字符串</span></span><br><span class="line">    response = r.get(<span class="string">'content'</span>).replace(<span class="string">'&#123;br&#125;'</span>, <span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于接收来自朋友间的对话消息</span></span><br><span class="line"><span class="comment"># 如果不用这个，朋友发的消息便不会自动回复</span></span><br><span class="line"><span class="meta">@itchat.msg_register(itchat.content.TEXT)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_content</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> get_response(msg[<span class="string">'Text'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    itchat.auto_login(<span class="keyword">True</span>) <span class="comment">#保存登录信息，下次不用扫码</span></span><br><span class="line">    itchat.run()</span><br></pre></td></tr></table></figure><h2 id="详细解释"><a href="#详细解释" class="headerlink" title="详细解释"></a>详细解释</h2><p><code>itchat.auto_login()</code>是将会通过微信扫描二维码登录，但是这种登录的方式确实短时间的登录，并不会保留登录的状态，也就是下次登录时还是需要扫描二维码。</p><p>另外，扫码登录是通过网页版微信登陆，因为新注册的微信账号可能不支持网页版功能，所以最好是在使用之前，先验证下能够登录网页版微信。</p><h2 id="其他机器人"><a href="#其他机器人" class="headerlink" title="其他机器人"></a>其他机器人</h2><ul><li>图灵机器人：<a href="http://www.turingapi.com/" target="_blank" rel="noopener">http://www.turingapi.com/</a> 需求实名制认证，并每天免费数量只有100条）</li><li>一个AI：<a href="http://www.yige.ai/（免费且无数量限制。可自定义回复、对话、场景。但高级功能使用比较复杂。但已长时间没人维护）" target="_blank" rel="noopener">http://www.yige.ai/（免费且无数量限制。可自定义回复、对话、场景。但高级功能使用比较复杂。但已长时间没人维护）</a></li><li>智能闲聊（腾讯）<a href="https://ai.qq.com/product/nlpchat.shtml" target="_blank" rel="noopener">https://ai.qq.com/product/nlpchat.shtml</a> ( 申请使用，免费且无限量。大厂靠谱。)</li><li>天行机器人 <a href="https://www.tianapi.com/apiview/47" target="_blank" rel="noopener">https://www.tianapi.com/apiview/47</a> (认证后有7万条免费使用。之后收费：1万条/1块钱)</li><li>海知智能 <a href="https://ruyi.ai/" target="_blank" rel="noopener">https://ruyi.ai/</a> （功能很强大，不仅仅用于聊天。需申请 key，免费）</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 12 2019 11:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;通过&lt;code&gt;itchat&lt;/code&gt;获取微信的相关消息，将微信消息传输到&lt;strong&gt;青云客&lt;/strong&gt;机器人接口，获取机器人的返回消息。将返回消息返回给微信消息的发送人。以此实现将微信个人号变身为聊天机器人。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://www.donlex.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Java对象排序之Comparator与Comparable</title>
    <link href="https://www.donlex.cn/archives/bf9ef5a8.html"/>
    <id>https://www.donlex.cn/archives/bf9ef5a8.html</id>
    <published>2019-07-04T06:34:06.000Z</published>
    <updated>2019-07-04T06:41:14.715Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于Java中的排序，我们常见的就是对<code>Array</code>、<code>List</code>进行排序，对于<code>Array</code>，我们可以使用<code>Arrays.sort(数组)</code>进行排序;对于List，我们可以使用<code>Collections.sort(list)</code>进行排序<a id="more"></a>，如果是需要对一个实体类的对象进行排序呢？</p><h2 id="两种实现方法"><a href="#两种实现方法" class="headerlink" title="两种实现方法"></a>两种实现方法</h2><p>有两种方法可以实现。</p><ol><li>一种方法是类实现<code>Comparable&lt;T&gt;</code>接口，然后调用<code>Collections.sort(List)</code>方法进行排序。</li><li>另一种方法是类不实现Comparable<t>接口，而在排序时使用<code>Collections.sort(List, Comparator&lt;T&gt;)</code>方法，并实现其中的<code>Comparator&lt;T&gt;</code>接口。</t></li></ol><p><code>Comparable</code>接口有一个<code>comparTo(Object o)</code>方法,它返回整数类型。对于表达式<code>x.compareTo(y)</code>,<strong>如果返回值为0，则表示x和y相等,如果返回值大于0，则表示x大于y,如果返回值小于0，则表示x小于y；</strong>这是一个比较器接口。</p><h2 id="排序实现"><a href="#排序实现" class="headerlink" title="排序实现"></a>排序实现</h2><p>模拟一个<code>Person</code>对象，要对其进行排序，排序的条件是先根据id排序，当id相等的情况下载根据年龄进行排序，当年龄相等再根据名字。</p><h3 id="通过类实现Comparable接口进行排序"><a href="#通过类实现Comparable接口进行排序" class="headerlink" title="通过类实现Comparable接口进行排序"></a>通过类实现Comparable<t>接口进行排序</t></h3><h4 id="Person类"><a href="#Person类" class="headerlink" title="Person类"></a>Person类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">//非 int、float等基本类型</span></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Integer age, String name, Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [id="</span> + id + <span class="string">", age="</span> + age + <span class="string">", name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (non-Javadoc)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @see java.lang.Comparable#compareTo(java.lang.Object)</span></span><br><span class="line"><span class="comment"> * 先根据id比较，如果id相同，就比较age，最后再比较name(按姓名的字典序升序排序)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.id &gt; o.getId()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.id &lt; o.getId()) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.age &gt; o.getAge()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt; o.getAge()) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name.compareTo(o.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在客户端中测试"><a href="#在客户端中测试" class="headerlink" title="在客户端中测试"></a>在客户端中测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Compareto</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Person&gt; students = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        students.add(<span class="keyword">new</span> Person(<span class="number">25</span>, <span class="string">"LuanYu"</span>,<span class="number">0</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> Person(<span class="number">26</span>, <span class="string">"LuanYu"</span>,<span class="number">0</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> Person(<span class="number">26</span>, <span class="string">"LuanYu"</span>,<span class="number">5</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> Person(<span class="number">27</span>, <span class="string">"LiuBei"</span>,<span class="number">1</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> Person(<span class="number">27</span>, <span class="string">"Zhangi"</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        Collections.sort(students);</span><br><span class="line">        <span class="keyword">for</span>(Person student:students)&#123;</span><br><span class="line">            System.out.println(student.toString());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person [id=0, age=25, name=LuanYu]</span><br><span class="line">Person [id=0, age=26, name=LuanYu]</span><br><span class="line">Person [id=1, age=27, name=LiuBei]</span><br><span class="line">Person [id=1, age=27, name=Zhangi]</span><br><span class="line">Person [id=5, age=26, name=LuanYu]</span><br></pre></td></tr></table></figure><p>可以看到，按姓名的字典序升序排序。使用这用方法排序不能使用基本类型（int, float）等。</p><h3 id="通过Comparable接口实现排序"><a href="#通过Comparable接口实现排序" class="headerlink" title="通过Comparable接口实现排序"></a>通过Comparable<t>接口实现排序</t></h3><h4 id="Person类-1"><a href="#Person类-1" class="headerlink" title="Person类"></a>Person类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 没有实现Comparable&lt;T&gt;接口的Person类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Integer age, String name, Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Person [id="</span> + id + <span class="string">", age="</span> + age + <span class="string">", name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">List&lt;Person&gt; persons = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">persons.add(<span class="keyword">new</span> Person(<span class="number">25</span>, <span class="string">"LsanYu"</span>, <span class="number">0</span>));</span><br><span class="line">persons.add(<span class="keyword">new</span> Person(<span class="number">26</span>, <span class="string">"LuanYu"</span>, <span class="number">0</span>));</span><br><span class="line">persons.add(<span class="keyword">new</span> Person(<span class="number">26</span>, <span class="string">"LuanYu"</span>, <span class="number">5</span>));</span><br><span class="line">persons.add(<span class="keyword">new</span> Person(<span class="number">27</span>, <span class="string">"LiuBei"</span>, <span class="number">1</span>));</span><br><span class="line">persons.add(<span class="keyword">new</span> Person(<span class="number">27</span>, <span class="string">"Zhangi"</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">Collections.sort(persons, <span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</span><br><span class="line"><span class="comment">//            这里是需要做处理的部分</span></span><br><span class="line">            <span class="keyword">if</span> (o1.getId() &gt; o2.getId()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (o1.getId() &lt; o2.getId()) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (o1.getAge()&gt;o2.getAge()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (o1.getAge() &lt; o2.getAge()) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(Person person:persons)&#123;</span><br><span class="line">            System.out.println(person.toString());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person [id=0, age=25, name=LsanYu]</span><br><span class="line">Person [id=0, age=26, name=LuanYu]</span><br><span class="line">Person [id=1, age=27, name=LiuBei]</span><br><span class="line">Person [id=1, age=27, name=Zhangi]</span><br><span class="line">Person [id=5, age=26, name=LuanYu]</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>第二种方法通过重新定义<code>Collections.sort(List,Comparator)</code>实现排序，当需求有变需要按照其他规则(比如id)排序时，只有重新定义一个<code>Comaprator</code>,而不用修改<code>Person</code>类,然后修改客户端代码，这样就基本满足了<strong>开闭原则</strong>，即可以通过增加新类方便的扩充新功能，满足新需求而不用修改原来的代码。</li><li>如果我们采用让<code>Person</code>实现<code>Comaparable</code>接口，则在想采用新的排序规则时，必须修改Person里的<code>comareTo(Object o)</code>方法，这样就违反了开闭原则。综上，第二种方法比第一种方法更加灵活。</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;关于Java中的排序，我们常见的就是对&lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;List&lt;/code&gt;进行排序，对于&lt;code&gt;Array&lt;/code&gt;，我们可以使用&lt;code&gt;Arrays.sort(数组)&lt;/code&gt;进行排序;对于List，我们可以使用&lt;code&gt;Collections.sort(list)&lt;/code&gt;进行排序
    
    </summary>
    
    
      <category term="Java" scheme="https://www.donlex.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中常用日期处理类</title>
    <link href="https://www.donlex.cn/archives/eca56fbc.html"/>
    <id>https://www.donlex.cn/archives/eca56fbc.html</id>
    <published>2019-07-03T06:02:40.000Z</published>
    <updated>2019-07-03T06:13:36.504Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>日期处理在Java中一块非常复杂的内容，包含日期的国际化，日期和时间的转换，日期的加减运算，日期的展示格式等问题。而且在一些面试中也可能会有问到，所以整理了一下这部分的内容。<a id="more"></a>主要涉及以下四个类：</p><ol><li>Date</li><li>Calendar</li><li>DateFormat</li><li>SimpleDateFormat</li></ol><p>由于Date类算是比较常用的，所以这里只整理了后面的3个类。</p><h2 id="Calendar-类"><a href="#Calendar-类" class="headerlink" title="Calendar 类"></a>Calendar 类</h2><p>它是一个抽象类，它为特定瞬间与一组诸如 YEAR、MONTH、DAY_OF_MONTH、HOUR 等 日历字段之间的转换提供了一些方法，并为操作日历字段（例如获得下星期的日期）提供了一些方法。</p><h3 id="获取Calendar类的通用的对象"><a href="#获取Calendar类的通用的对象" class="headerlink" title="获取Calendar类的通用的对象"></a>获取Calendar类的通用的对象</h3><p>Calendar 提供了一个类方法 <code>getInstance</code>，以获得此类型的一个通用对象。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Calendar now = Calendar.getInstance();</span><br></pre></td></tr></table></figure><p></p><h3 id="获得并设置日历字段的方法"><a href="#获得并设置日历字段的方法" class="headerlink" title="获得并设置日历字段的方法"></a>获得并设置日历字段的方法</h3><p><code>Calendar</code>可以调用set等方法来设置日历字段的字段值，调用 <code>get</code> 、<code>getTimeInMills</code>、<code>getTime</code>等方法设置日历字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Calendar cal Calendar.getInstance();</span><br><span class="line">cal.setTime(<span class="keyword">new</span> Date());</span><br><span class="line"><span class="keyword">int</span> year = cal.get(Calendar.YEAR);</span><br><span class="line"><span class="keyword">int</span> month = (cal.get(Calendar.MONTH))+<span class="number">1</span>; <span class="comment">//从0开始计算</span></span><br><span class="line">System.out.println(cal.getTime());<span class="comment">//输出 Wed Jul 03 12:49:38 CST 2019</span></span><br><span class="line">System.out.println(year);<span class="comment">//输出2019</span></span><br><span class="line">System.out.println(month);<span class="comment">//输出7</span></span><br></pre></td></tr></table></figure><h3 id="日历进行加减法"><a href="#日历进行加减法" class="headerlink" title="日历进行加减法"></a>日历进行加减法</h3><p>在Calendar对象的使用<strong><code>add</code></strong>方法进行时间的<strong>加减操作</strong>，其中第二个参数为正数表示“加”，负数表示“减”。<br>下面是Calendar类中<strong>add方法</strong>的定义:<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adds or subtracts the specified amount of time to the given calendar field,</span></span><br><span class="line"><span class="comment">     * based on the calendar's rules. For example, to subtract 5 days from</span></span><br><span class="line"><span class="comment">     * the current time of the calendar, you can achieve it by calling:</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;&lt;code&gt;add(Calendar.DAY_OF_MONTH, -5)&lt;/code&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field the calendar field.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount the amount of date or time to be added to the field.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #roll(int,int)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #set(int,int)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 翻译如下：</span></span><br><span class="line"><span class="comment">* 根据日历的规则，将指定的时间量添加或减去给定的日历字段。</span></span><br><span class="line"><span class="comment">* 例如，要从日历的当前时间减去5天，可以通过调用：add（Calendar.DAY_OF_MONTH，-5）来实现它。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>字段日历字段。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>为要添加到字段的日期或时间量。</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> field, <span class="keyword">int</span> amount)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p>通过实例例子来使用一下<strong>add方法</strong>：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Calendar cal Calendar.getInstance();</span><br><span class="line">cal.setTime(<span class="keyword">new</span> Date());</span><br><span class="line">System.out.println(cal.getTime());<span class="comment">//输出 Wed Jul 03 12:49:38 CST 2019</span></span><br><span class="line">cal.add(Calendar.YEAR,-<span class="number">1</span>);<span class="comment">//日期减1年</span></span><br><span class="line">cal.add(Calendar.MONTH,<span class="number">3</span>);<span class="comment">//日期加3个月</span></span><br><span class="line">cal.add(Calendar.DAY_OF_MONTH,<span class="number">10</span>);<span class="comment">//日期加10天</span></span><br><span class="line">System.out.println(cal.getTime());<span class="comment">//输出Sat Oct 13 12:55:14 CST 2018</span></span><br><span class="line">System.out.println(cal.get(Calendar.YEAR));<span class="comment">//2018</span></span><br><span class="line">System.out.println(cal.get(Calendar.MONTH));<span class="comment">//9</span></span><br><span class="line">System.out.println(cal.get(Calendar.DAY_OF_MONTH));<span class="comment">//13</span></span><br></pre></td></tr></table></figure><p></p><h2 id="DataFormat-类"><a href="#DataFormat-类" class="headerlink" title="DataFormat 类"></a>DataFormat 类</h2><p>DataFormat是对日期/时间格式化的抽象类，它可以格式化或解析日期或时间，即允许将时间对象进行相互的转换。</p><h3 id="获取DataFormat对象实例"><a href="#获取DataFormat对象实例" class="headerlink" title="获取DataFormat对象实例"></a>获取DataFormat对象实例</h3><p>DataFormat是抽象类，不能创建该类的对象，需要使用静态方法 <code>getDataInstance</code>、<code>getTimeInstance</code>、<code>getDataTimeInstance</code>来得到日期时间格式对象<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DataFormat df = DataFormat.getDataInstance(); </span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">DataFormat df1 = DataFormat.getDateInstance(DateFormat.LONG,LONG FRANCE);</span><br></pre></td></tr></table></figure><p></p><h3 id="日期格式化字符串"><a href="#日期格式化字符串" class="headerlink" title="日期格式化字符串"></a>日期格式化字符串</h3><p>将日期、时间格式化为字符串，主要使用<strong><code>format</code></strong>方法。例如<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataFormat df = DataFormat.getDataInstance(); </span><br><span class="line">String dfStr = df.format(<span class="keyword">new</span> Date());</span><br></pre></td></tr></table></figure><p></p><h3 id="字符串解析为日期"><a href="#字符串解析为日期" class="headerlink" title="字符串解析为日期"></a>字符串解析为日期</h3><p>将字符串解析为日期，主要使用<strong><code>parse</code></strong>方法。 例如<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataFormat df = DataFormat.getDataInstance(); </span><br><span class="line">Date d1 = df.parse(<span class="string">"2019-7-3"</span>)</span><br></pre></td></tr></table></figure><p></p><h2 id="SimpleDateFormat-类"><a href="#SimpleDateFormat-类" class="headerlink" title="SimpleDateFormat 类"></a>SimpleDateFormat 类</h2><p><code>SimpleDateFormat</code>是<code>DateFormat</code>的子类，该类在包 java.text中，该类允许用户自定义的日期-时间格式的模式，并利用此模式来显示日期和时间</p><h3 id="SimpleDateFormat-对象的创建"><a href="#SimpleDateFormat-对象的创建" class="headerlink" title="SimpleDateFormat 对象的创建"></a>SimpleDateFormat 对象的创建</h3><p>使用<strong><code>new</code></strong>关键字创建SimpleDateFormat类对象，例如<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat fmt1 = <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line">SimpleDateFormat fmt2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">SimpleDateFormat fmt3 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH时mm分ss秒"</span>);</span><br></pre></td></tr></table></figure><p></p><h3 id="格式化日期时间对象"><a href="#格式化日期时间对象" class="headerlink" title="格式化日期时间对象"></a>格式化日期时间对象</h3><p>SimpleDateFormat类提供<strong><code>format</code></strong>方法来格式化日期和时间对象，例如：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Date now = <span class="keyword">new</span> Date();</span><br><span class="line">String str1 = fm1.format(now);</span><br></pre></td></tr></table></figure><p></p><h3 id="解析字符串为日期对象"><a href="#解析字符串为日期对象" class="headerlink" title="解析字符串为日期对象"></a>解析字符串为日期对象</h3><p>SimpleDateFormat类提供<strong><code>parse</code></strong>方法来解析字符串为日期和时间对象，返回Date对象。例如：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date d1 = fmt1.parse(<span class="string">"2019-07-03"</span>);</span><br></pre></td></tr></table></figure><p></p><h3 id="完整例子"><a href="#完整例子" class="headerlink" title="完整例子"></a>完整例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calen</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用不同的日期时间方式初始化对象</span></span><br><span class="line">SimpleDateFormat fmt1 = <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line">SimpleDateFormat fmt2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">SimpleDateFormat fmt3 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH时mm分ss秒 E"</span>);</span><br><span class="line"></span><br><span class="line">Date now = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用format将时间日期对象用不同的形式显示出来</span></span><br><span class="line">System.out.println(fmt1.format(now));</span><br><span class="line">System.out.println(fmt2.format(now));</span><br><span class="line">System.out.println(fmt3.format(now));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用parse解析为时间日期对象</span></span><br><span class="line">SimpleDateFormat fmt4 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">Date d1 = fmt4.parse(<span class="string">"2019-07-03"</span>);<span class="comment">// 这里的格式需要与上面的字符串格式相同</span></span><br><span class="line">System.out.println(d1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用的模式字符串"><a href="#常用的模式字符串" class="headerlink" title="常用的模式字符串"></a>常用的模式字符串</h3><p>在日期和时间模式字符串中，未加引号的字母 ‘A’ 到 ‘Z’ 和 ‘a’ 到 ‘z’ 被解释为模式字母，用来表示日期或时间字符串元素。<br>定义了以下模式字母（所有其他字符 ‘A’ 到 ‘Z’ 和 ‘a’ 到 ‘z’ 都被保留）：</p><table><thead><tr><th>字母</th><th>日期或时间元素</th></tr></thead><tbody><tr><td>Y</td><td>年Year</td></tr><tr><td>M</td><td>年中的月份</td></tr><tr><td>w</td><td>年中的周数</td></tr><tr><td>W</td><td>月份中的周数</td></tr><tr><td>D</td><td>年中的天数</td></tr><tr><td>d</td><td>月份中的天数</td></tr><tr><td>F</td><td>月份中的星期</td></tr><tr><td>E</td><td>星期中的天数</td></tr><tr><td>H</td><td>一天中的小时数(0~23)</td></tr><tr><td>k</td><td>一天中的小时数(1~24)</td></tr><tr><td>K</td><td>am/pm 中的小时数(0~11)</td></tr><tr><td>h</td><td>am/pm 中的小时数(1~12)</td></tr><tr><td>m</td><td>小时钟的分钟数</td></tr><tr><td>s</td><td>分钟中的秒数</td></tr><tr><td>S</td><td>毫秒数</td></tr></tbody></table><h2 id="注"><a href="#注" class="headerlink" title="注"></a>注</h2><p>本文非原创文章，只是通过网上的博客和参考书籍整理出来</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;日期处理在Java中一块非常复杂的内容，包含日期的国际化，日期和时间的转换，日期的加减运算，日期的展示格式等问题。而且在一些面试中也可能会有问到，所以整理了一下这部分的内容。
    
    </summary>
    
    
      <category term="Java" scheme="https://www.donlex.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>突破淘宝登录验证反爬</title>
    <link href="https://www.donlex.cn/archives/fcbe89fc.html"/>
    <id>https://www.donlex.cn/archives/fcbe89fc.html</id>
    <published>2019-04-25T02:26:31.000Z</published>
    <updated>2019-04-25T02:37:59.824Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Aug 12 2019 11:22:00 GMT+0800 (GMT+08:00) --><blockquote><p>文章首发于<a href="https://www.imooc.com/article/285729" target="_blank" rel="noopener">慕课网手记</a></p></blockquote><p>上一篇<a href="https://www.donlex.cn/archives/b85433a6.html">《在爬100万数据的时候，我发现了爬虫的进阶之路》</a> ，有“怂恿”大家伙去突破淘宝的登录反爬，不知道有没有试了的。反正我是试了，也找到了三种方法。在这里分享一下<br><a id="more"></a></p><ol><li>账号密码登录(有滑块)</li><li>微博第三方账号登录(无滑块)</li><li>扫码登录</li></ol><p>上面都是使用 <code>Selenium</code> 进行模拟登录的，这样就可以不用手动添加各种<code>Cookie</code>或者<code>Session</code>，少了很多工作。</p><p><strong>详细效果请继续阅读，具体代码自行理解，都是非常简单的</strong></p><p><strong>注：仅供技术交流使用，请不要用作其他用途！</strong></p><h3 id="淘宝账号登录"><a href="#淘宝账号登录" class="headerlink" title="# 淘宝账号登录"></a># 淘宝账号登录</h3><p>一般直接使用<code>Selenium</code>自动控制登录，都会无法通过滑块验证。所以解决的策略就是让这些网站识别不出来你是用了<code>Selenium</code>，因此需要将模拟浏览器设置为<strong>开发者模式</strong>，这样就可以防止被网站识别出来。</p><p>只需要在初始化时，添加下面这条语句，就可以设置为开发者模式。<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此步骤很重要</span></span><br><span class="line">options.add_experimental_option(<span class="string">'excludeSwitches'</span>[<span class="string">'enable-automation'</span>])</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome(options=options)</span><br></pre></td></tr></table></figure><p></p><p>只需要多加一行代码，就能突破淘宝登录滑块，效果如下：</p><p><img src="https://i.loli.net/2019/04/24/5cc02db5ec2a0.gif" alt=""></p><p>当然这只是让<code>Selenium</code>通过淘宝的滑块验证而已，至于如何滑动还是需要自己动手撸代码才能实现真正的自动。。。</p><h3 id="微博账号登录"><a href="#微博账号登录" class="headerlink" title="# 微博账号登录"></a># 微博账号登录</h3><p>在淘宝网的登录页面，有第三方登录的入口，试了一下，发现绑定微博的账号跟淘宝更配哦。直接通过<code>Selenium</code>控制，输入微博账号和密码，<strong>不需要滑块验证，不需要滑块验证，不需要滑块验证</strong>(重要的事情说**，直接就可以登录。</p><p><img src="https://i.loli.net/2019/04/24/5cc02db27e6db.gif" alt=""></p><h3 id="扫码登录"><a href="#扫码登录" class="headerlink" title="# 扫码登录"></a># 扫码登录</h3><p>还有一种方法：扫码登录，这种方式检测出是使用自动化工具，但是扫码登录能减去所有的验证环节，并且不需要写登录代码，只需要在扫码的页面停留几秒，等待手机淘宝扫码验证完成。接着就可以继续下面的工作了，不过这有一个缺点，就是不能设置不加载图片，如果设置了不加载图片的话，二维码就显示不了，就别谈登录了，这样一来，爬取的速度肯定会受到影响。</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan_login</span><span class="params">(url)</span>:</span></span><br><span class="line">    driver.get(url)</span><br><span class="line">    <span class="comment"># 等待扫码登录</span></span><br><span class="line">    sleep(<span class="number">15</span>)</span><br><span class="line">    <span class="comment"># 进入之后开始其他操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    url = <span class="string">'https://login.taobao.com/member/login.jhtml'</span></span><br><span class="line">    scan_login(url)</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://i.loli.net/2019/04/24/5cc02db6efca9.gif" alt=""></p><h3 id="最后"><a href="#最后" class="headerlink" title="# 最后"></a># 最后</h3><p>个人感觉在需要突破登录部分的反爬措施，直接使用 <code>Selenium</code> 是最通用的，当然得看具体的情况。如果你正在练习登录这方面的爬虫，希望能够对你帮助！如果你有好的方法，也可以交流一下！</p><h3 id="附："><a href="#附：" class="headerlink" title="# 附："></a># 附：</h3><p><a href="https://github.com/stormdony/python_demo/tree/master/TaoBao_Login" target="_blank" rel="noopener"><strong>点击获取，源码地址</strong></a></p><p>如果对你有帮助记得<strong>Star</strong>！</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 12 2019 11:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;文章首发于&lt;a href=&quot;https://www.imooc.com/article/285729&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;慕课网手记&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;上一篇&lt;a href=&quot;https://www.donlex.cn/archives/b85433a6.html&quot;&gt;《在爬100万数据的时候，我发现了爬虫的进阶之路》&lt;/a&gt; ，有“怂恿”大家伙去突破淘宝的登录反爬，不知道有没有试了的。反正我是试了，也找到了三种方法。在这里分享一下&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://www.donlex.cn/tags/python/"/>
    
      <category term="selenium" scheme="https://www.donlex.cn/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>&#39;在爬100万数据的时候，我发现了爬虫的进阶之路&#39;</title>
    <link href="https://www.donlex.cn/archives/b85433a6.html"/>
    <id>https://www.donlex.cn/archives/b85433a6.html</id>
    <published>2019-04-20T01:54:19.000Z</published>
    <updated>2019-04-20T02:16:21.444Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Aug 12 2019 11:22:00 GMT+0800 (GMT+08:00) --><blockquote><p>文章首发于<a href="https://www.imooc.com/article/285472" target="_blank" rel="noopener">慕课网手记</a></p></blockquote><p><strong>学习最好还是要以需求为驱动才能够快速成长。</strong>这是我最近一段时间的体会，其实也是我最近在写爬虫的思考。通过需求，让你处于紧迫的状态，不断学习新的知识，去满足这样那样的需求。这个时候，你会处于一种高度集中的状态，你的学习能力也是最强的时候。<br><a id="more"></a></p><p>之前的爬虫文章使用的都是一些基础 Python 的知识，特别是在做一些小的项目的时候，运用好那些基础知识就完全够用了。所以如果没有用到新的知识或没有接触到新的知识的时候，我就没有写出来，这就是这么长时间没有写爬虫文章的原因。并且，我感觉我的爬虫技术一直都处在初级阶段，原地踏步，没有一点进步，也就造成了“没话可说”的尴尬地步。</p><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>前几周帮别人写了一份爬虫，逻辑不难，步骤也不繁琐，只要简单的几步就可以，但是数据量是我目前接触的最多的一次，将近 <strong>100万</strong> 的数据量。</p><p>就算这条虫子不慌，它爹心里也慌呀！要是中途出现什么情况，没有做好断点续爬的准备的话，那岂不是得从头再来？</p><p>还有就是，这么多的数据，在一台机子上爬，效率明显是很慢的，如果学会一点集群和分布式爬虫，使用上，那每一台机子的压力就会小很多。</p><p>还有一点能够提高效率的方法就是通过使用进程、线程。这些我也还不是很懂，因为这次的项目需要 <code>Selenium</code> 才能通过验证，所以我也就没有使用，不然肯定也会学一下，不知道 <code>Selenium</code> 中有没有多进程，线程这种东西？</p><p><img src="https://i.loli.net/2019/04/20/5cba7d030cbe9.jpg" alt="timg.jpg"></p><p>再有就是 <strong>爬虫的监控</strong> 和 <strong>异常情况的通知</strong> 。爬虫的监控我没有接触过，不过异常情况的通知，我倒是想着通过邮件提醒，虽然简单，但是却也能够达到目的，所以我在做这个项目的时候，使用了一下，感觉还可以，后面可能会详细的写一写。</p><p>说爬虫怎么能不说反爬呢？说一下我这次遇到的反爬机制。它的反爬主要是在你登陆的时候，就已经干掉了大部分想要爬取它信息的人了。(因为不能透露太多的信息，所以就用淘宝来举个例子吧，个人感觉难度跟淘宝也是差不多的。)</p><p>为什么这么说呢？你可以去试一下淘宝的登陆，看是有多么的难。相信爬过淘宝的都知道，淘宝的<code>ua</code>参数，是经过了算法将一大堆因素组合起来的，想要破解，可能要琢磨到脑壳疼吧。。。</p><p>所以只能通过使用 <code>Selenium</code> 进行模拟登陆。但我可以很绝对地告诉你，淘宝能够识别你使用了自动化工具，你的滑块验证码无论怎么刷新，永远都是错误状态，永远不会成功。就像下图一样</p><p><img src="https://i.loli.net/2019/04/20/5cba7d12d348e.png" alt="支付宝登录.PNG"></p><p>我试着使用了网上一种声称能够突破的办法: <em>使用代理</em>。果然，理想很美满，现实很骨感。滑块验证码是通过了，但是逃不过异地登陆短信验证这一关。</p><p>如果想要体验一下我当时的绝望感，可以自己尝试着去搞一下淘宝的数据看下，看一下你能不能成功 <em>“突破上分”</em></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>当然，BB了这么一大堆，还是要给一点干货的。那就给个我个人认为 <strong>爬虫进阶的方向</strong> 吧！</p><ol><li>过硬的反“反爬”能力</li><li>进程与线程</li><li>断点续爬</li><li>分布式</li><li>爬虫监控</li><li>异常通知</li></ol><p>这次爬虫，我有一种打通了任督二脉的感觉，这种感觉就好像，那些打王者荣耀厉害的人说的 <strong>意识</strong>一样 ：什么时候该反野，什么时候该团一样。不知道这样讲能不能体会到我醍醐灌顶的那种感觉？</p><p>还有一点体会，就是把事情往难了想和往量多了想，你就能找到当下自己所察觉不到的漏洞。当然，往难里想也是需要一定的基础的;但是往量多的方面想，这就没有任何难度了，在脑海中模拟，总能挑出一点瑕疵了吧？</p><p>以前听过下面这句话，没有什么深刻的体会；现在，算是真正的理解了。</p><blockquote><p>再大的困难除以13亿，都会变得很渺小！再小的力量乘以13亿，就会变成爱的海洋。</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 12 2019 11:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;文章首发于&lt;a href=&quot;https://www.imooc.com/article/285472&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;慕课网手记&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;学习最好还是要以需求为驱动才能够快速成长。&lt;/strong&gt;这是我最近一段时间的体会，其实也是我最近在写爬虫的思考。通过需求，让你处于紧迫的状态，不断学习新的知识，去满足这样那样的需求。这个时候，你会处于一种高度集中的状态，你的学习能力也是最强的时候。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://www.donlex.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Element UI中使用过滤器</title>
    <link href="https://www.donlex.cn/archives/5def7cdc.html"/>
    <id>https://www.donlex.cn/archives/5def7cdc.html</id>
    <published>2019-04-09T10:49:12.000Z</published>
    <updated>2019-04-09T11:32:31.639Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --><p><img src="https://camo.githubusercontent.com/462f24153b8e8739c8ea71f7102585c4cb0e1575/68747470733a2f2f63646e2e7261776769742e636f6d2f456c656d6546452f656c656d656e742f6465762f656c656d656e745f6c6f676f2e737667#pic_center" alt="http://element-ui.cn/#/zh-CN"></p><a id="more"></a><h3 id="创建基本文件"><a href="#创建基本文件" class="headerlink" title="创建基本文件"></a>创建基本文件</h3><p>在<code>html</code> 文件中引入css和js文件，参考<a href="http://element-ui.cn/#/zh-CN/component/installation" target="_blank" rel="noopener">网站</a>的教程，使用相应的标签，这里做了一个简单的带有查询功能的表格。<br>效果如下：</p><p><img src="https://i.loli.net/2019/04/09/5cac7ad806b4b.gif#pic_center" alt="info.gif"></p><p>上面的Gif中，在表格中的时间一列，使用了过滤器，将<code>new Date()</code>得到的时间转化为<code>yyyy-mm-dd</code>。</p><p>实现代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>vue-test2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/element-ui/lib/theme-chalk/index.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">"handlesearch(tableData)"</span> <span class="attr">stripe</span> <span class="attr">style</span>=<span class="string">"width: 49%"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">"index"</span> <span class="attr">label</span>=<span class="string">"序号"</span> <span class="attr">width</span>=<span class="string">"60"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"name"</span> <span class="attr">label</span>=<span class="string">"姓名"</span> <span class="attr">width</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"age"</span> <span class="attr">label</span>=<span class="string">"年龄"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- element ui 使用过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"stime"</span> <span class="attr">label</span>=<span class="string">"时间"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span>&#123;&#123; scope.row.stime | dateFormat &#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"操作"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"danger"</span> @<span class="attr">click</span>=<span class="string">"handledelete(scope.$index)"</span> <span class="attr">icon</span>=<span class="string">"el-icon-delete"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入组件库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/element-ui/lib/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 过滤器 --&gt;</span></span></span><br><span class="line"><span class="undefined">Vue.filter("dateFormat", function(dataStr) &#123;</span></span><br><span class="line"><span class="undefined">var dt = new Date(dataStr);</span></span><br><span class="line"><span class="undefined">// yyyy-mm-dd</span></span><br><span class="line"><span class="undefined">var y = dt.getFullYear();</span></span><br><span class="line"><span class="undefined">var m = dt.getMonth() + 1;</span></span><br><span class="line"><span class="undefined">var d = dt.getDate();</span></span><br><span class="line"><span class="undefined">var hh = dt.getHours();</span></span><br><span class="line"><span class="undefined">var mm = dt.getMinutes();</span></span><br><span class="line"><span class="undefined">var ss = dt.getSeconds();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">return y + "-" + m + "-" + d + "  " + hh + ":" + mm + ":" + ss</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">var vm = new Vue(&#123;</span></span><br><span class="line"><span class="undefined">el: "#app",</span></span><br><span class="line"><span class="undefined">data: &#123;</span></span><br><span class="line"><span class="undefined">name: "",</span></span><br><span class="line"><span class="undefined">age: "",</span></span><br><span class="line"><span class="undefined">search: "",</span></span><br><span class="line"><span class="undefined">tableData: [&#123;</span></span><br><span class="line"><span class="undefined">name: "donlex1",</span></span><br><span class="line"><span class="undefined">age: "18",</span></span><br><span class="line"><span class="undefined">stime: new Date()</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="undefined">name: "donlex2",</span></span><br><span class="line"><span class="undefined">age: "19",</span></span><br><span class="line"><span class="undefined">stime: new Date()</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">]</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><a href="https://dev.tencent.com/u/stormdony/p/VueDemo/git/blob/master/test2.html" target="_blank" rel="noopener">详细源码地址</a></strong></p><h3 id="Vue-使用过滤器"><a href="#Vue-使用过滤器" class="headerlink" title="Vue 使用过滤器"></a>Vue 使用过滤器</h3><blockquote><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在双花括号中 --&gt;</span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line">&lt;!-- 在 `v-bind` 中 --&gt;</span><br><span class="line">&lt;div v-bind:id=<span class="string">"rawId | formatId"</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="Element-使用过滤器"><a href="#Element-使用过滤器" class="headerlink" title="Element 使用过滤器"></a>Element 使用过滤器</h3><p>在Vue中，使用过滤器通过在<code>v-for</code>遍历变量之后加管道符，但是在ele中，使用的是prop绑定属性的，所以需要在添加一个<code>template</code> 标签，然后在里面使用<strong>双花括号插值</strong>。<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"stime"</span> <span class="attr">label</span>=<span class="string">"时间"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span>&#123;&#123; scope.row.stime | dateFormat &#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>注意，<code>stime</code>要与你的定义的属性对应，<code>dateFormat</code>指的是过滤器。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/462f24153b8e8739c8ea71f7102585c4cb0e1575/68747470733a2f2f63646e2e7261776769742e636f6d2f456c656d6546452f656c656d656e742f6465762f656c656d656e745f6c6f676f2e737667#pic_center&quot; alt=&quot;http://element-ui.cn/#/zh-CN&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://www.donlex.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Android 中上下文的两种获取区别</title>
    <link href="https://www.donlex.cn/archives/26e4a709.html"/>
    <id>https://www.donlex.cn/archives/26e4a709.html</id>
    <published>2019-03-21T02:33:44.000Z</published>
    <updated>2019-03-21T02:35:52.111Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在写 Android 程序的过程中，总是遇到一些很细节的问题，如果不深入的了解以下，可能会导致一些隐藏漏洞。比如在获取上下文的过程中，有时候使用 <code>activity.this</code> 与 <code>getApplicationContext()</code> ，但是一直都是模糊不清楚的，只有到运行出错的时候，才会考虑到换下，然后解决了问题，但是不知道原因 ：( 所以写了这篇，以供参考。。。<br><a id="more"></a></p><h3 id="Application类"><a href="#Application类" class="headerlink" title="Application类"></a>Application类</h3><p><code>getApplicationContext()</code>是通过以下方法返回一个 <code>Application</code>对象,所以进一步了解这个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Return the application that owns this activity. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Application <span class="title">getApplication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mApplication;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p><code>android.app.Application</code> 类代表当前运行的应用程序。<strong>应用程序启动时，系统会自动创建对应的 Application 类的实例，并一直伴随应用程序的生命周期，而且始终维持一个实例</strong>。对于同一个应用程序，由于系统只会保证存在一个 Application 实例，即在所有组件中获取的是同一个 Application 对象，因此 Application 特别适合保存应用程序中多个组件都需要访问的对象</p><p>通过扩展 Application 类，可以完成以下3种任务：</p><ol><li>对 Android 运行时广播的应用程序及事件做出反应</li><li>在应用程序组件中传递对象</li><li>管理和维护多个应用程序组件所需要的资源</li></ol><h4 id="生命周期事件"><a href="#生命周期事件" class="headerlink" title="生命周期事件"></a>生命周期事件</h4><p>Application 类为应用程序的创建和终止、低可用内存和配置的改变提供了时间处理程序，通过重写以下方法，可以实现上述几种情况的应用程序行为<br><strong>1. onCreate()</strong><br>在创建应用程序时调用该方法。通过重写来实例化应用程序单态，也可以创建和实例化任何应用程序状态变量或共享资源</p><p><strong>2. onLowMemory()</strong><br>一般只会在后台进程已经终止但前台应用程序依然缺少内存资源时会被调用，通过重写来清空缓存或者释放不必要的资源</p><p><strong>3. onTrimMemory()</strong><br>作为<code>onLowMemory</code>的一个特定应用程序的替代选择，在 Android 4.0 （API level 13）中引入。当运行时决定当前应用程序是否尝试减少其内存开销。该方法包含一个 <code>level</code> 参数，用于提供请求的上下文<br><strong>4. onConfigurationChanged()</strong><br>与 Activity 不同，当配置发生改变时，应用程序对象不会被终止和重启；如果应用程序使用的值依赖于特定的配置，则重写该方法来重新加载这个值，或者在应用程序级别处理配置的改变</p><h3 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h3><ol><li><p>对于 <code>getApplicationContext()</code>，我们可以假定它是一个父类，它属于整个应用程序共有，<code>Activity.this</code> 可以假定为其的一个子类，该子类包含了一些特定的引用。所以，一般可以用 getApplicationContext 的地方都可以用特定的 Activity.this 代替。</p></li><li><p>在生命周期上，通过 <code>getApplicationContext()</code> 得到的上下文对象们只要当前的应用程序还存在，那么该对象就会一直存在，对于 <code>Activity.this</code> 上下文来说，只要当前的 activity 执行了 onDestory 方法，这个上下文对象就会一起被系统收回。</p></li><li><p>在应用场景上，如果我们通过一个上下文对象来执行某个动作，且希望一直处于活跃状态，那么应该用 getApplicationContext 来获取上下文，如数据库的操作。此时，<strong>如果采用 Activity.this，那么当前 Activity 调用 onDestory 方法时，数据库就会关闭，应用程序会产生错误。</strong></p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><code>getApplicationContext()</code> 返回应用的上下文，生命周期是整个应用，应用摧毁它才摧毁</li><li><code>Activity.this</code> 的 <code>context</code> 返回当前 activity 的上下文，属于 <code>activity</code> ，<code>activity</code> 摧毁他就摧毁</li><li>和 UI 操作相关的不建议使用 <code>getApplicationContext()</code>，一般都使用和 activity 相关的 context，其余的操作，看具体情况，根据存在的生命周期的长度作出选择</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在写 Android 程序的过程中，总是遇到一些很细节的问题，如果不深入的了解以下，可能会导致一些隐藏漏洞。比如在获取上下文的过程中，有时候使用 &lt;code&gt;activity.this&lt;/code&gt; 与 &lt;code&gt;getApplicationContext()&lt;/code&gt; ，但是一直都是模糊不清楚的，只有到运行出错的时候，才会考虑到换下，然后解决了问题，但是不知道原因 ：( 所以写了这篇，以供参考。。。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://www.donlex.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 应用程序生命周期</title>
    <link href="https://www.donlex.cn/archives/6c31379e.html"/>
    <id>https://www.donlex.cn/archives/6c31379e.html</id>
    <published>2019-03-20T04:40:17.000Z</published>
    <updated>2019-03-20T04:43:13.623Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --><h3 id="Android应用程序生命周期"><a href="#Android应用程序生命周期" class="headerlink" title="Android应用程序生命周期"></a>Android应用程序生命周期</h3><p>所谓应用程序的生命周期，是指应用程序进程从创建到消亡的整个过程。在 Android 中，多数情况下每个程序都是在各自独立的 Linux 进程中运行的。当一个程序或其某些部分被请求时，进程就“出生”；当该程序没必要继续运行且系统需要回收此进程所专用的内存时，该进程就“死亡”。因此，Android 程序的生命周期是由系统控制而非程序自身直接控制，这与桌面应用程序有一定的区別，桌面应用程序的进程也是在其他进程或用户请求时被创建，但经常在程序结束时执行一个特定的动作（如从 main 方法 return )而导致进程结束。<br><a id="more"></a></p><p>简而言之，Android 应用程序的生命周期是指在 Android 系统中进程从启动到终止的所有阶段，即 Android 程序启动到停止的全过程，程序的生命周期是由 Android 系统进行调度和控制的。但由于手机的内存是存限的.随着打开的应用程序数量的增多，可能造成应用程序响应时间过长或系统假死的情况，因此在系统内存不足的情况下，Android 系统便会舍车保帅，选择性地来终止一些重要性较低的程序应用，以便回收内存供更重要的应用程序使用。</p><p>Android 根据应用程序的组件及组件当前的运行状态将所有的进程按重要性程度从高到低划分为5个优先级：</p><ol><li>前台进程</li><li>可见进程</li><li>服务进程</li><li>后台进程</li><li>空进程</li></ol><p><img src="https://i.loli.net/2019/03/20/5c91c4ab2b713.png" alt="系统进程优先级.png"></p><h3 id="前台进程"><a href="#前台进程" class="headerlink" title="前台进程"></a>前台进程</h3><p>前台进程是指显示在屏幕最前端并与用户正在交互的进程，是 Android 系统中最重要的进程。前台进程包括以下4种情况：</p><ol><li>进程中的 Activity 正在与用户进行交互</li><li>进城服务被 Activity 调用，并且该 Activity 正在与用户进行交互</li><li>进程服务正在执行生命周期中的回调方法，如 onCreat() 、 onStart() 或 onResume() 方法</li><li>进程的 BroadcastReceiver 正在执行 onReceive() 方法</li></ol><p>Android 系统在多个前台进程同时运行时，可能会出现资源不足的情况，此时可清除部分前台进程，以保证主要的用户界面能够及时反应</p><h3 id="可见进程"><a href="#可见进程" class="headerlink" title="可见进程"></a>可见进程</h3><p>可见进程是指部分程序界面能够被用户看见，却不在前台与用户交互，不能响应界面事件的进程。如果一个进程包含服务，且该服务正在被用户可见的 Activity 调用，则此进程同样被视为可见进程。</p><p>Android 系统一般存在少量的可见进程，只用在特殊的情况下，Android 系统才会为保证前台进程的资源而清除可见进程</p><h3 id="服务进程"><a href="#服务进程" class="headerlink" title="服务进程"></a>服务进程</h3><p>服务进程是指由 startService() 方法启动服务的进程。服务进程有以下特征：</p><ol><li>没有用户界面</li><li>在后台长期运行</li></ol><p>例如，MP3 播放器或后台上传下载数据的网络服务，都是服务进程</p><p>除非 Android 系统不能保证前台进程或可见进程所必要的资源，否则不会强行清除服务进程</p><h3 id="后台进程"><a href="#后台进程" class="headerlink" title="后台进程"></a>后台进程</h3><p>后台进程是指不包含任何已启动的服务，且没有任何可劲的 Activity 的进程。后台进程不直接影响用户的体验。 Android 系统中一般存在数量较多的后台进程，因此这些进程会被曝存在一个列表中，以保证在系统资源紧张是，系统会优先清除用户较长时间没有用到的后台进程</p><h3 id="空进程"><a href="#空进程" class="headerlink" title="空进程"></a>空进程</h3><p>空进程是指不包含任何活跃组件的进程。通常保留这些空进程，是为了将其作为一个缓存，在其所属的应用组件下一次需要时，以缩短启动的时间</p><p>在系统资源紧张时，Android 系统首先会清除空进程，但为了提高Android 系统应用程序的启动速度，Android 系统会将空进程保存在系统内存中，当用户重新启动该程序时，空进程会被重新使用。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;Android应用程序生命周期&quot;&gt;&lt;a href=&quot;#Android应用程序生命周期&quot; class=&quot;headerlink&quot; title=&quot;Android应用程序生命周期&quot;&gt;&lt;/a&gt;Android应用程序生命周期&lt;/h3&gt;&lt;p&gt;所谓应用程序的生命周期，是指应用程序进程从创建到消亡的整个过程。在 Android 中，多数情况下每个程序都是在各自独立的 Linux 进程中运行的。当一个程序或其某些部分被请求时，进程就“出生”；当该程序没必要继续运行且系统需要回收此进程所专用的内存时，该进程就“死亡”。因此，Android 程序的生命周期是由系统控制而非程序自身直接控制，这与桌面应用程序有一定的区別，桌面应用程序的进程也是在其他进程或用户请求时被创建，但经常在程序结束时执行一个特定的动作（如从 main 方法 return )而导致进程结束。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://www.donlex.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 环境搭建与第一个程序</title>
    <link href="https://www.donlex.cn/archives/4348e5be.html"/>
    <id>https://www.donlex.cn/archives/4348e5be.html</id>
    <published>2019-03-19T03:25:15.000Z</published>
    <updated>2019-03-20T04:43:13.625Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --><h3 id="安卓开发环境搭建"><a href="#安卓开发环境搭建" class="headerlink" title="安卓开发环境搭建"></a>安卓开发环境搭建</h3><p>作为一个独立的平台，Android 有两个比较成熟的开发环境，一个是Eclipse ，另一个是 Google 平台的 Android studio 。<br><a id="more"></a><br>这两个开发环境的搭建过程，在网上一搜一大把，由于已经安装了 Android studio ，这里我就不多做介绍了。具体可以参考以下教程：</p><ol><li><a href="https://www.cnblogs.com/vikezhu/p/4606230.html" target="_blank" rel="noopener">windows 平台下 Android studio 开发环境搭建教程</a></li><li><a href="https://blog.csdn.net/ermua/article/details/79201313" target="_blank" rel="noopener">搭建 Android 开发环境——Eclipse</a></li></ol><h3 id="安装安卓模拟器"><a href="#安装安卓模拟器" class="headerlink" title="安装安卓模拟器"></a>安装安卓模拟器</h3><p>安装完开发环境之后，可以选择安装原始的模拟器，不过启动比较慢，并且对于不同的 CPU 可能需要安装加速器。这里选择<a href="https://www.yeshen.com/" target="_blank" rel="noopener">夜神模拟器</a>。它的启动比较快，可以设置成不同的分辨率，并且不是原始的那种丑丑的安卓UI。</p><p>安装过程很简单，一路 Next 就行，不过最好选择一个容易记住的路径，方便以后使用 adb 连接。</p><p>安装完之后直接双击启动夜神模拟器。<br><img src="https://i.loli.net/2019/03/19/5c90603e243a9.png" alt="1.PNG"></p><h3 id="创建-Android-项目"><a href="#创建-Android-项目" class="headerlink" title="创建 Android 项目"></a>创建 Android 项目</h3><p>做完上面的准备工作就可以开始创建第一个安卓项目了。<br>启动 Android studio ，选择第一个选项。<br><img src="https://i.loli.net/2019/03/19/5c9060507ef61.jpg" alt="2.jpg"><br>设置项目信息<br><img src="https://i.loli.net/2019/03/19/5c906059452b4.png" alt="3.png"><br>之后直接一路 Next ，最后一步点击 Finish 即可。</p><p>创建完之后，等待片刻，就可以看到下面的工作界面了。<br><img src="https://i.loli.net/2019/03/19/5c906061e301a.png" alt="4.png"></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>由于作为第一个程序，所以直接运行，看一下效果。 点击右上角的那个绿色三角形的运行键(看上图↑)，选择夜神模拟器，如果没有显示我们开启的模拟器，可以运行 <code>cmd</code> 命令，<code>cd</code> 到夜神安装目录，执行以下命令连接到模拟器：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nox_adb.exe connect 127.0.0.1:62001</span><br></pre></td></tr></table></figure><p></p><p>或者直接重启夜神模拟器，就可以看到了。</p><p>选择夜神模拟器，等待连接安装该App，就可以直接进入刚才创建的程序中了。</p><p><img src="https://i.loli.net/2019/03/19/5c9060690c38c.png" alt="5.png"></p><p>运行界面：<br><img src="https://i.loli.net/2019/03/19/5c906073103da.png" alt="6.png"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;安卓开发环境搭建&quot;&gt;&lt;a href=&quot;#安卓开发环境搭建&quot; class=&quot;headerlink&quot; title=&quot;安卓开发环境搭建&quot;&gt;&lt;/a&gt;安卓开发环境搭建&lt;/h3&gt;&lt;p&gt;作为一个独立的平台，Android 有两个比较成熟的开发环境，一个是Eclipse ，另一个是 Google 平台的 Android studio 。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://www.donlex.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 实现自定义拦截器</title>
    <link href="https://www.donlex.cn/archives/5e164285.html"/>
    <id>https://www.donlex.cn/archives/5e164285.html</id>
    <published>2019-03-13T04:09:47.000Z</published>
    <updated>2019-03-13T04:16:32.967Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">个人笔记，仅供备忘</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1.创建一个类实现 <code>HandlerInterceptor</code> 接口，重写接口的方法，添加<code>@Component</code> 注解，这个注解是为后面的使用时进行注入。例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.donlex.mybatiswithspringboot.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.donlex.mybatiswithspringboot.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Userhandle</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//方法执行之前调用拦截</span></span><br><span class="line">        System.out.println(<span class="string">"拦截成功"</span>);</span><br><span class="line"><span class="comment">//这里写拦截之后的处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在入口类的目录或者兄弟目录下创建一个类继承 <code>WebMvcConfigurerAdapter</code>类并重写 <code>addInterceptors</code> 方法；<br>在该类上方添加注解<code>@SpringBootConfiguration</code>，该 注解表明这是一个配置类<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.donlex.mybatiswithspringboot.config;</span><br><span class="line"><span class="keyword">import</span> com.donlex.mybatiswithspringboot.component.Userhandle;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringBootConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span> <span class="comment">//添加配置类注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserLoginConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Userhandle userhandle;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry interceptorRegistry)</span> </span>&#123;</span><br><span class="line">        interceptorRegistry.addInterceptor(userhandle).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>3.项目结构如下：<br><strong>注意新建的包跟启动类是在同一级</strong></p><p><img src="https://i.loli.net/2019/03/13/5c88836923c3d.png" alt="自定义拦截.PNG"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;个人笔记，仅供备忘&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.donlex.cn/tags/Java/"/>
    
      <category term="Spring Boot" scheme="https://www.donlex.cn/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot 整合 Mybatis</title>
    <link href="https://www.donlex.cn/archives/5e164287.html"/>
    <id>https://www.donlex.cn/archives/5e164287.html</id>
    <published>2019-03-11T05:22:38.000Z</published>
    <updated>2019-03-13T04:18:36.636Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Aug 12 2019 11:22:00 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参考了很多文章，写下这篇仅供以后备忘记录使用</span><br></pre></td></tr></table></figure><a id="more"></a><p>学了 Spring boot，现在刚好和之前学的 Mybatis 整合起来，利用插件可以自动生成代码，减少工作量。</p><h3 id="创建一个-Springboot-项目"><a href="#创建一个-Springboot-项目" class="headerlink" title="创建一个 Springboot 项目"></a>创建一个 Springboot 项目</h3><p><img src="https://i.loli.net/2019/03/11/5c8614fe739f8.png" alt="勾选模块.PNG"></p><h3 id="使用-MyBatis-Generator-逆向生成代码"><a href="#使用-MyBatis-Generator-逆向生成代码" class="headerlink" title="使用 MyBatis Generator 逆向生成代码"></a>使用 MyBatis Generator 逆向生成代码</h3><h4 id="1-配置-Maven-pom-xml-文件"><a href="#1-配置-Maven-pom-xml-文件" class="headerlink" title="1.配置 Maven pom.xml 文件"></a>1.配置 Maven pom.xml 文件</h4><p>在 pom.xml 增加以下插件：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>配置好 Maven 插件，下面需要配置插件需要配置文件</p><h4 id="2-配置插件的要配置文件"><a href="#2-配置插件的要配置文件" class="headerlink" title="2.配置插件的要配置文件"></a>2.配置插件的要配置文件</h4><p>在 maven 项目下的 <code>src/main/resources</code> 目录下建立名为 Maven 的项目配置文件存放路径如下图：<code>generatorConfig.xml</code> 和 <code>generator.properties</code> 配置文件，</p><p><code>Maven</code>的项目配置文件存放路径如下图 <strong>（图片中的generator.properties写成了generatorCongif.properties，请修改回generator.properties）</strong> ：</p><p><img src="https://i.loli.net/2019/03/11/5c86151e303f0.png" alt="目录结构.PNG"></p><p>generatorConfig.xml 代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入属性配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"generator.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定特定数据库的jdbc驱动jar包的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">"$&#123;jdbc.driverLocation&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"default"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- optional，旨在创建class时，对注释进行控制 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--jdbc的数据库连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span></span></span><br><span class="line"><span class="tag">                <span class="attr">driverClass</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">connectionURL</span>=<span class="string">"$&#123;jdbc.connectionURL&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">userId</span>=<span class="string">"$&#123;jdbc.userId&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">password</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类</span></span><br><span class="line"><span class="comment">            targetPackage     指定生成的model生成所在的包名</span></span><br><span class="line"><span class="comment">            targetProject     指定在该项目下所在的路径</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.donlex.mybatiswithspringboot.model"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 是否允许子包，即targetPackage.schemaName.tableName --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否对model添加 构造函数 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"constructorBased"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否对类CHAR类型的列的数据进行trim操作 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"immutable"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mapping"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码</span></span><br><span class="line"><span class="comment">                type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象</span></span><br><span class="line"><span class="comment">                type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象</span></span><br><span class="line"><span class="comment">                type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.donlex.mybatiswithspringboot.mapper"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--一个table对应数据库中的一张表--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"info"</span> <span class="attr">domainObjectName</span>=<span class="string">"Info"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"order"</span> <span class="attr">domainObjectName</span>=<span class="string">"Order"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"product"</span> <span class="attr">domainObjectName</span>=<span class="string">"Product"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"receive"</span> <span class="attr">domainObjectName</span>=<span class="string">"Receive"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"shopping"</span> <span class="attr">domainObjectName</span>=<span class="string">"Shopping"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"user"</span> <span class="attr">domainObjectName</span>=<span class="string">"User"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>generator.propertites 代码如下：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverLocation=D:\\Firefox\\download\\mysql-connector-java-5.1.44\\mysql-connector-java-5.1.44-bin.jar</span><br><span class="line">jdbc.driverClass=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.connectionURL=jdbc:mysql:///shopstore</span><br><span class="line">jdbc.userId=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure><p></p><h4 id="3-设置并运行插件"><a href="#3-设置并运行插件" class="headerlink" title="3.设置并运行插件"></a>3.设置并运行插件</h4><p>在 Intellij IDEA 中点击 菜单 run 中 Edit Configurations,点击 + 号，选择 maven，会出现,在 Commond line 填上<code>mybatis-generator:generate -e</code>,apply 和 ok。步骤参考下图</p><p><img src="https://i.loli.net/2019/03/11/5c86153896410.png" alt="maven2.PNG"></p><p>最后点击 generator运行，生成 model，mapper，mapping<br><img src="https://i.loli.net/2019/03/11/5c8615586cd47.png" alt="运行插件.png"></p><p>逆向生成的目录结构如下<br><img src="https://i.loli.net/2019/03/11/5c8615452f90c.png" alt="mapper.PNG"></p><h3 id="添加service和controller"><a href="#添加service和controller" class="headerlink" title="添加service和controller"></a>添加service和controller</h3><p>在与mapper同级的目录下创建<code>service</code>目录，在里面创建<code>UserService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.donlex.mybatiswithspringboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.donlex.mybatiswithspringboot.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.donlex.mybatiswithspringboot.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//注意添加这个注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getOneUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = userMapper.selectByPrimaryKey(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在与mapper同级的目录下创建<code>controller</code>目录，在里面创建<code>UserController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.donlex.mybatiswithspringboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.donlex.mybatiswithspringboot.model.User;</span><br><span class="line"><span class="keyword">import</span> com.donlex.mybatiswithspringboot.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/query"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = userService.getOneUser();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Uid:"</span>+user.getUid()+<span class="string">" Username:"</span>+user.getUsername();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目录结构如图：<br><img src="https://i.loli.net/2019/03/11/5c86156f86267.png" alt="last.PNG"></p><h3 id="添加-application-yml-配置文件"><a href="#添加-application-yml-配置文件" class="headerlink" title="添加 application.yml 配置文件"></a>添加 application.yml 配置文件</h3><p>删除原有的 <code>application.properties</code> 文件,添加 <code>application.yml</code> 文件中的配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/shopstore?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 该配置节点为独立的节点，如果将这个配置放在spring的节点下，导致配置无法被识别</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapping/*.xml</span>  <span class="comment">#注意：一定要对应mapper映射xml文件的所在路径</span></span><br></pre></td></tr></table></figure><h3 id="设置扫描Mapper包"><a href="#设置扫描Mapper包" class="headerlink" title="设置扫描Mapper包"></a>设置扫描Mapper包</h3><p>在启动类中添加<strong>包扫描注解</strong><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.donlex.mybatiswithspringboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.donlex.mybatiswithspringboot.mapper"</span>)<span class="comment">//注意添加这个注解，并且配置正确的包名</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatiswithspringbootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MybatiswithspringbootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p>启动项目，访问对应的 URL 即可。<br><img src="https://i.loli.net/2019/03/11/5c86157d30157.png" alt="test.PNG"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 12 2019 11:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;参考了很多文章，写下这篇仅供以后备忘记录使用&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.donlex.cn/tags/Java/"/>
    
      <category term="Spring Boot" scheme="https://www.donlex.cn/tags/Spring-Boot/"/>
    
      <category term="Mybatis" scheme="https://www.donlex.cn/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>爬取猫眼评论，分析《阿丽塔：战斗天使》</title>
    <link href="https://www.donlex.cn/archives/f7b23e1a.html"/>
    <id>https://www.donlex.cn/archives/f7b23e1a.html</id>
    <published>2019-02-25T05:03:13.000Z</published>
    <updated>2019-02-25T05:11:02.992Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Aug 12 2019 11:22:00 GMT+0800 (GMT+08:00) --><blockquote><p>文章首发于<a href="http://www.imooc.com/article/279957" target="_blank" rel="noopener">慕课网</a></p></blockquote><p>日本漫画《铳梦》改编电影《阿丽塔：战斗天使（Alita: Battle Angel）》于2019年2月22日在中国大陆上映了。近几天，网上对于这部电影的分析评论也很多，今天通过猫眼电影上的评论粗浅地看一下大众对这部科幻电影的评价。</p><a id="more"></a><p><img src="https://i.loli.net/2019/02/25/5c737831a3806.jpg" alt="webwxgetmsgimg (7).jpg"></p><h3 id="工具库"><a href="#工具库" class="headerlink" title="工具库"></a>工具库</h3><ul><li>jieba</li><li>pyecharts</li><li>wordcloud</li><li>matplotlib</li></ul><h3 id="分析网站"><a href="#分析网站" class="headerlink" title="分析网站"></a>分析网站</h3><p>通过在浏览器模拟移动端请求评论的数据，可以看到随着页面的更改url并没有发生变化，初步判断该网页是通过js加载的，通过多次的实践，找到了请求返回的真实url和关键参数，这里返回的是json格式的数据，里面有我们需要的信息。</p><p><img src="https://i.loli.net/2019/02/25/5c7377c7543eb.png" alt="1.PNG"></p><p>通过比较多次请求信息，发现以下的参数</p><p><img src="https://i.loli.net/2019/02/25/5c7377e2dfede.png" alt="参数.PNG"></p><p>其中，<code>offset</code>是每次请求的起始评论条数；<code>limit</code>是每次请求的条数；<code>ts</code>我猜测应该是时间戳，不用管它</p><h3 id="抓取信息"><a href="#抓取信息" class="headerlink" title="抓取信息"></a>抓取信息</h3><p>通过返回的json数据，选取其中的<code>content</code>,<code>score</code>,<code>nick</code> ,<code>gender</code>这四个参数，将这些信息写入一个文本中保存起来。</p><p><img src="https://i.loli.net/2019/02/25/5c7377f052fb9.png" alt="评论.PNG"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_comments</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    爬取评论信息</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">14352</span>, <span class="number">15</span>):</span><br><span class="line">        URL = self.url.format(i)</span><br><span class="line">        data = requests.get(url=URL, headers=self.header)</span><br><span class="line">        time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">        com = json.loads(data.text)</span><br><span class="line">        comments = com[<span class="string">'data'</span>][<span class="string">'comments'</span>]</span><br><span class="line">        <span class="keyword">if</span> comments:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> comments:</span><br><span class="line">                data = &#123;</span><br><span class="line">                    <span class="string">'content'</span>: item[<span class="string">'content'</span>],</span><br><span class="line">                    <span class="string">'score'</span>: item[<span class="string">'score'</span>],</span><br><span class="line">                    <span class="string">'nick'</span>: item[<span class="string">'nick'</span>],</span><br><span class="line">                    <span class="string">'gender'</span>: item[<span class="string">'gender'</span>],</span><br><span class="line">                &#125;</span><br><span class="line">                print(data)</span><br><span class="line">                <span class="comment"># 存入文本中</span></span><br><span class="line">                <span class="keyword">with</span> open(<span class="string">'comments.txt'</span>, <span class="string">'a+'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">                    file.writelines(</span><br><span class="line">                        json.dumps(data, ensure_ascii=<span class="keyword">False</span>) + <span class="string">'\n'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><p>由于爬取的数据都是比较规整，并且没有选择太多的特征，所以就跳过清洗阶段，直接进行分析。为了便于观察，这里使用pyecharts进行可视化处理。</p><h4 id="1-评论词云"><a href="#1-评论词云" class="headerlink" title="1. 评论词云"></a>1. 评论词云</h4><p>通过词云，能够一目了然地知道这些精选评论都说了些什么。由于使用pyecharts制作词云需要比较繁琐的处理，所以直接使用<code>jieba</code>分词并用<code>WordCloud</code>进行制作词云。<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_wordcloud</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        制作词云图</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        text = self.get_context()</span><br><span class="line">        seg_list = jieba.cut(text, cut_all=<span class="keyword">True</span>)</span><br><span class="line">        wc = WordCloud(background_color=<span class="string">"#CCC"</span>,  <span class="comment"># 设置背景颜色</span></span><br><span class="line">                       <span class="comment"># mask = pic , #设置背景图片</span></span><br><span class="line">                       max_words=<span class="number">2000</span>,  <span class="comment"># 设置最大显示的字数</span></span><br><span class="line">                       margin=<span class="number">5</span>,</span><br><span class="line">                       font_path=<span class="string">"C:\\Windows\\Fonts\\STFANGSO.ttf"</span>,  <span class="comment"># 不加这一句显示口字形乱码</span></span><br><span class="line">                       max_font_size=<span class="number">80</span>,  <span class="comment"># 设置字体最大值</span></span><br><span class="line">                       random_state=<span class="number">40</span>,  <span class="comment"># 设置有多少种随机生成状态，即有多少种配色方案</span></span><br><span class="line">                       )</span><br><span class="line">        w1 = <span class="string">"/ "</span>.join(seg_list)  <span class="comment"># 全模式</span></span><br><span class="line">        mword = wc.generate(w1)</span><br><span class="line">        plt.imshow(mword)</span><br><span class="line">        plt.axis(<span class="string">"off"</span>)</span><br><span class="line">        plt.savefig(<span class="string">'wordcloud.png'</span>)  <span class="comment"># 保存图片</span></span><br><span class="line">        plt.show()</span><br></pre></td></tr></table></figure><p></p><p><img src="https://i.loli.net/2019/02/25/5c73780363c33.png" alt="wordcloud.png"></p><p>可以看到，“好看”，“特效”，“第二部”，“剧情”，这几个词都是出现比较多次的，再通过去原来保存评论信息的文本中查询，这些词的整个评论，我发现很多人都是在说电影没有结局，或者期待出第二部的。</p><h4 id="2-性别比例"><a href="#2-性别比例" class="headerlink" title="2.性别比例"></a>2.性别比例</h4><p>由于爬取到的性别都是使用数字0，1,2进行标识的，所以按照程序员的思维。我就用 0代表男，1代表女，2代表未知来进行处理了。<br><img src="https://i.loli.net/2019/02/25/5c73780d34505.png" alt="性别环形图.png"></p><p>从图中可以看出，评论以男性居多，约占总数的50%，估计是男同胞们对这类比较抽象，充满想象的电影比较感兴趣吧~</p><h4 id="3-评分情况"><a href="#3-评分情况" class="headerlink" title="3.评分情况"></a>3.评分情况</h4><p>从猫眼的总评分9.0来看，这部电影还是比较不错的，截止2月24日已经在中国拿下了39510万元的票房。</p><p><img src="https://i.loli.net/2019/02/25/5c737816de932.png" alt="评分柱状图.png"></p><p>通过上图，可以清楚地看到，大部分的评分都是8-10分的，所以总评的9.0也是有依据的。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>虽然这部电影一些的情节都没有介绍清楚，但是很多的战斗细节都用特效展现的淋漓尽致。据说全片特效渲染动用了30000台电脑，总耗时4.32亿小时，这也是国内的“五毛钱”特效所不能比拟的。</p><p>最后来看下这部片的女主吧！</p><p><img src="https://i.loli.net/2019/02/25/5c73782db6170.jpg" alt="位图.jpg"></p><h3 id="附"><a href="#附" class="headerlink" title="附"></a>附</h3><p>源码传送门： <strong><a href="https://github.com/stormdony/python_demo/tree/master/MaoYan_Alita_Battle_Angel" target="_blank" rel="noopener">https://github.com/stormdony/python_demo/tree/master/MaoYan_Alita_Battle_Angel</a></strong></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 12 2019 11:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;文章首发于&lt;a href=&quot;http://www.imooc.com/article/279957&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;慕课网&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;日本漫画《铳梦》改编电影《阿丽塔：战斗天使（Alita: Battle Angel）》于2019年2月22日在中国大陆上映了。近几天，网上对于这部电影的分析评论也很多，今天通过猫眼电影上的评论粗浅地看一下大众对这部科幻电影的评价。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://www.donlex.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>解决CentOS启动docker失败</title>
    <link href="https://www.donlex.cn/archives/4a8dab04.html"/>
    <id>https://www.donlex.cn/archives/4a8dab04.html</id>
    <published>2019-02-03T09:01:32.000Z</published>
    <updated>2019-02-03T09:02:56.875Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Aug 12 2019 11:22:00 GMT+0800 (GMT+08:00) --><h3 id="解决CentOS启动docker失败"><a href="#解决CentOS启动docker失败" class="headerlink" title="解决CentOS启动docker失败"></a>解决CentOS启动docker失败</h3><p>安装了Docker之后，使用命令启动却失败。<br><a id="more"></a><br>报错：</p><blockquote><p>Job for docker.service failed because the control process exited with error code. See “systemctl status docker.service” and “journalctl -xe” for details.</p></blockquote><p>按照提示：<code>systemctl status docker.service</code>，看到的日志信息：</p><p><img src="https://i.loli.net/2019/02/03/5c56ad5dd084c.png" alt="docker.PNG"></p><p>看了几篇博客都没有解决，最终找到解决办法：是由于docker不支持图像内核驱动，SELinux不支持这个内核上的OrthALA2图形驱动程序。解决办法：修改docker配置文件：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi  /etc/sysconfig/docker</span><br></pre></td></tr></table></figure><p></p><p>把OPTIONS一行改为：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS='--selinux-enabled=false --log-driver=journald --signature-verification=false'</span><br></pre></td></tr></table></figure><p></p><p>按下“Esc”，输入“：”加“wq”保存退出vim编辑模式，再启动：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure><p></p><p>就行了。</p><p>补充：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看版本： docker -v</span><br><span class="line">开机启动docker： systemctl enable docker   </span><br><span class="line">停止docker：  systemctl stop docker</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 12 2019 11:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;解决CentOS启动docker失败&quot;&gt;&lt;a href=&quot;#解决CentOS启动docker失败&quot; class=&quot;headerlink&quot; title=&quot;解决CentOS启动docker失败&quot;&gt;&lt;/a&gt;解决CentOS启动docker失败&lt;/h3&gt;&lt;p&gt;安装了Docker之后，使用命令启动却失败。&lt;br&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://www.donlex.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Hexo中NexT主题添加置顶功能</title>
    <link href="https://www.donlex.cn/archives/caeb67e2.html"/>
    <id>https://www.donlex.cn/archives/caeb67e2.html</id>
    <published>2019-02-01T14:34:38.000Z</published>
    <updated>2019-02-06T12:26:00.308Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>文章置顶功能有很多的好处，比如：</p><ol><li>快速定位</li><li>吸引用户注意力</li><li>。。。</li></ol><a id="more"></a><p>所以下面就介绍如何在hexo的next主题中添加文章置顶功能。</p><h3 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h3><p>目前已经有修改后支持置顶的仓库，可以直接用以下命令安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><p>然后在需要置顶的文章的<code>Front-matter</code>中加上<code>top: true</code>即可。比如下面这篇文章：<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">我的2018总结</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">随笔</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">随笔</span></span><br><span class="line"><span class="attr">abbrlink:</span> <span class="number">58</span><span class="string">a24148</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-12</span><span class="bullet">-31</span> <span class="number">11</span><span class="string">:45:59</span></span><br><span class="line"><span class="attr">top:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p></p><p>到目前为止，置顶功能已经可以实现了。所有相关博文到这边就结束了。</p><p>不过置顶的文章显示在最上面之后，如果没有明确的置顶标志，是不是感觉有点怪怪的呢？</p><h3 id="设置置顶标志"><a href="#设置置顶标志" class="headerlink" title="设置置顶标志"></a>设置置顶标志</h3><p>打开：<code>/themes/next/layout/_macro</code>目录下的<code>post.swig</code>文件，定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下，插入如下代码：<br></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> post.top %&#125;</span><br><span class="line">    &lt;i class="fa fa-thumb-tack"&gt;&lt;/i&gt;</span><br><span class="line">    &lt;font color="green"&gt;置顶&lt;/font&gt;</span><br><span class="line">    &lt;span class="post-meta-divider"&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p></p><center><br>效果请<a href="https://www.donlex.cn"><strong>返回主页</strong></a> 或者<strong>顶部</strong>查看<br></center><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;文章置顶功能有很多的好处，比如：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;快速定位&lt;/li&gt;&lt;li&gt;吸引用户注意力&lt;/li&gt;&lt;li&gt;。。。&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="NexT" scheme="https://www.donlex.cn/categories/NexT/"/>
    
    
      <category term="hexo" scheme="https://www.donlex.cn/tags/hexo/"/>
    
      <category term="NexT" scheme="https://www.donlex.cn/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>站点配置更新</title>
    <link href="https://www.donlex.cn/archives/undefined.html"/>
    <id>https://www.donlex.cn/archives/undefined.html</id>
    <published>2019-01-07T06:21:15.000Z</published>
    <updated>2019-01-07T07:21:20.385Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Aug 12 2019 11:22:00 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近更新了一下站点的一些配置，让网站的趣味性有了一定的提升。主要做了一下几点更新。</p><ol><li>添加雪花效果</li><li>添加天气插件</li><li>加入CNZZ统计<a id="more"></a> 下面将详细分享一下过程经历！</li></ol><h3 id="添加雪花效果"><a href="#添加雪花效果" class="headerlink" title="添加雪花效果"></a>添加雪花效果</h3><p>实现方法：在 <code>\themes\next\source\js\src</code> 目录下新建一个 <code>snow.js</code> 文件，复制粘贴一下代码。</p><p>其中样式一是六边形的雪片，样式二是小圆点的雪花，其自行调试，选择喜欢的样式。</p><h4 id="样式一"><a href="#样式一" class="headerlink" title="样式一"></a>样式一</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*样式一*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">$.fn.snow = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> $flake = $(<span class="string">'&lt;div id="snowbox" /&gt;'</span>).css(&#123;<span class="string">'position'</span>: <span class="string">'absolute'</span>,<span class="string">'z-index'</span>:<span class="string">'9999'</span>, <span class="string">'top'</span>: <span class="string">'-50px'</span>&#125;).html(<span class="string">'&amp;#10052;'</span>),</span><br><span class="line">documentHeight = $(<span class="built_in">document</span>).height(),</span><br><span class="line">documentWidth= $(<span class="built_in">document</span>).width(),</span><br><span class="line">defaults = &#123;</span><br><span class="line">minSize: <span class="number">10</span>,</span><br><span class="line">maxSize: <span class="number">20</span>,</span><br><span class="line">newOn: <span class="number">1000</span>,</span><br><span class="line">flakeColor: <span class="string">"#AFDAEF"</span> <span class="comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span></span><br><span class="line">&#125;,</span><br><span class="line">options= $.extend(&#123;&#125;, defaults, options);</span><br><span class="line"><span class="keyword">var</span> interval= setInterval( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> startPositionLeft = <span class="built_in">Math</span>.random() * documentWidth - <span class="number">100</span>,</span><br><span class="line">startOpacity = <span class="number">0.5</span> + <span class="built_in">Math</span>.random(),</span><br><span class="line">sizeFlake = options.minSize + <span class="built_in">Math</span>.random() * options.maxSize,</span><br><span class="line">endPositionTop = documentHeight - <span class="number">200</span>,</span><br><span class="line">endPositionLeft = startPositionLeft - <span class="number">500</span> + <span class="built_in">Math</span>.random() * <span class="number">500</span>,</span><br><span class="line">durationFall = documentHeight * <span class="number">10</span> + <span class="built_in">Math</span>.random() * <span class="number">5000</span>;</span><br><span class="line">$flake.clone().appendTo(<span class="string">'body'</span>).css(&#123;</span><br><span class="line">left: startPositionLeft,</span><br><span class="line">opacity: startOpacity,</span><br><span class="line"><span class="string">'font-size'</span>: sizeFlake,</span><br><span class="line">color: options.flakeColor</span><br><span class="line">&#125;).animate(&#123;</span><br><span class="line">top: endPositionTop,</span><br><span class="line">left: endPositionLeft,</span><br><span class="line">opacity: <span class="number">0.2</span></span><br><span class="line">&#125;,durationFall,<span class="string">'linear'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="keyword">this</span>).remove()</span><br><span class="line">&#125;);</span><br><span class="line">&#125;, options.newOn);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.fn.snow(&#123; </span><br><span class="line">    minSize: <span class="number">5</span>, <span class="comment">/* 定义雪花最小尺寸 */</span></span><br><span class="line">    maxSize: <span class="number">50</span>,<span class="comment">/* 定义雪花最大尺寸 */</span></span><br><span class="line">    newOn: <span class="number">300</span>  <span class="comment">/* 定义密集程度，数字越小越密集 */</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="样式二"><a href="#样式二" class="headerlink" title="样式二"></a>样式二</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*样式二*/</span></span><br><span class="line"><span class="comment">/* 控制下雪 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowFall</span>(<span class="params">snow</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 可配置属性 */</span></span><br><span class="line">    snow = snow || &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.maxFlake = snow.maxFlake || <span class="number">200</span>;   <span class="comment">/* 最多片数 */</span></span><br><span class="line">    <span class="keyword">this</span>.flakeSize = snow.flakeSize || <span class="number">10</span>;  <span class="comment">/* 雪花形状 */</span></span><br><span class="line">    <span class="keyword">this</span>.fallSpeed = snow.fallSpeed || <span class="number">1</span>;   <span class="comment">/* 坠落速度 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 兼容写法 */</span></span><br><span class="line">requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.oRequestAnimationFrame ||</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123; setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>); &#125;;</span><br><span class="line"></span><br><span class="line">cancelAnimationFrame = <span class="built_in">window</span>.cancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msCancelAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.oCancelAnimationFrame;</span><br><span class="line"><span class="comment">/* 开始下雪 */</span></span><br><span class="line">snowFall.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">/* 创建画布 */</span></span><br><span class="line">    snowCanvas.apply(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">/* 创建雪花形状 */</span></span><br><span class="line">    createFlakes.apply(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">/* 画雪 */</span></span><br><span class="line">    drawSnow.apply(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建画布 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowCanvas</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 添加Dom结点 */</span></span><br><span class="line">    <span class="keyword">var</span> snowcanvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</span><br><span class="line">    snowcanvas.id = <span class="string">"snowfall"</span>;</span><br><span class="line">    snowcanvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">    snowcanvas.height = <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">    snowcanvas.setAttribute(<span class="string">"style"</span>, <span class="string">"position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;"</span>);</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(snowcanvas);</span><br><span class="line">    <span class="keyword">this</span>.canvas = snowcanvas;</span><br><span class="line">    <span class="keyword">this</span>.ctx = snowcanvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="comment">/* 窗口大小改变的处理 */</span></span><br><span class="line">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        snowcanvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">        <span class="comment">/* snowcanvas.height = window.innerHeight */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 雪运动对象 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flakeMove</span>(<span class="params">canvasWidth, canvasHeight, flakeSize, fallSpeed</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvasWidth);   <span class="comment">/* x坐标 */</span></span><br><span class="line">    <span class="keyword">this</span>.y = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvasHeight);  <span class="comment">/* y坐标 */</span></span><br><span class="line">    <span class="keyword">this</span>.size = <span class="built_in">Math</span>.random() * flakeSize + <span class="number">2</span>;          <span class="comment">/* 形状 */</span></span><br><span class="line">    <span class="keyword">this</span>.maxSize = flakeSize;                           <span class="comment">/* 最大形状 */</span></span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="built_in">Math</span>.random() * <span class="number">1</span> + fallSpeed;         <span class="comment">/* 坠落速度 */</span></span><br><span class="line">    <span class="keyword">this</span>.fallSpeed = fallSpeed;                         <span class="comment">/* 坠落速度 */</span></span><br><span class="line">    <span class="keyword">this</span>.velY = <span class="keyword">this</span>.speed;                             <span class="comment">/* Y方向速度 */</span></span><br><span class="line">    <span class="keyword">this</span>.velX = <span class="number">0</span>;                                      <span class="comment">/* X方向速度 */</span></span><br><span class="line">    <span class="keyword">this</span>.stepSize = <span class="built_in">Math</span>.random() / <span class="number">30</span>;                 <span class="comment">/* 步长 */</span></span><br><span class="line">    <span class="keyword">this</span>.step = <span class="number">0</span>                                       <span class="comment">/* 步数 */</span></span><br><span class="line">&#125;</span><br><span class="line">flakeMove.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="keyword">this</span>.x,</span><br><span class="line">        y = <span class="keyword">this</span>.y;</span><br><span class="line">    <span class="comment">/* 左右摆动(余弦) */</span></span><br><span class="line">    <span class="keyword">this</span>.velX *= <span class="number">0.98</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.velY &lt;= <span class="keyword">this</span>.speed) &#123;</span><br><span class="line">        <span class="keyword">this</span>.velY = <span class="keyword">this</span>.speed</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.velX += <span class="built_in">Math</span>.cos(<span class="keyword">this</span>.step += <span class="number">.05</span>) * <span class="keyword">this</span>.stepSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.y += <span class="keyword">this</span>.velY;</span><br><span class="line">    <span class="keyword">this</span>.x += <span class="keyword">this</span>.velX;</span><br><span class="line">    <span class="comment">/* 飞出边界的处理 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.x &gt;= canvas.width || <span class="keyword">this</span>.x &lt;= <span class="number">0</span> || <span class="keyword">this</span>.y &gt;= canvas.height || <span class="keyword">this</span>.y &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.reset(canvas.width, canvas.height)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 飞出边界-放置最顶端继续坠落 */</span></span><br><span class="line">flakeMove.prototype.reset = <span class="function"><span class="keyword">function</span>(<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * width);</span><br><span class="line">    <span class="keyword">this</span>.y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.size = <span class="built_in">Math</span>.random() * <span class="keyword">this</span>.maxSize + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="built_in">Math</span>.random() * <span class="number">1</span> + <span class="keyword">this</span>.fallSpeed;</span><br><span class="line">    <span class="keyword">this</span>.velY = <span class="keyword">this</span>.speed;</span><br><span class="line">    <span class="keyword">this</span>.velX = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 渲染雪花-随机形状（此处可修改雪花颜色！！！）</span></span><br><span class="line">flakeMove.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> snowFlake = ctx.createRadialGradient(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="number">0</span>, <span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.size);</span><br><span class="line">    snowFlake.addColorStop(<span class="number">0</span>, <span class="string">"rgba(255, 255, 255, 0.9)"</span>);  <span class="comment">/* 此处是雪花颜色，默认是白色 */</span></span><br><span class="line">    snowFlake.addColorStop(<span class="number">.5</span>, <span class="string">"rgba(255, 255, 255, 0.5)"</span>); <span class="comment">/* 若要改为其他颜色，请自行查 */</span></span><br><span class="line">    snowFlake.addColorStop(<span class="number">1</span>, <span class="string">"rgba(255, 255, 255, 0)"</span>);    <span class="comment">/* 找16进制的RGB 颜色代码。 */</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.fillStyle = snowFlake;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.size, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.restore();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 创建雪花-定义形状 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFlakes</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxFlake = <span class="keyword">this</span>.maxFlake,</span><br><span class="line">        flakes = <span class="keyword">this</span>.flakes = [],</span><br><span class="line">        canvas = <span class="keyword">this</span>.canvas;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxFlake; i++) &#123;</span><br><span class="line">        flakes.push(<span class="keyword">new</span> flakeMove(canvas.width, canvas.height, <span class="keyword">this</span>.flakeSize, <span class="keyword">this</span>.fallSpeed))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 画雪 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawSnow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxFlake = <span class="keyword">this</span>.maxFlake,</span><br><span class="line">        flakes = <span class="keyword">this</span>.flakes;</span><br><span class="line">    ctx = <span class="keyword">this</span>.ctx, canvas = <span class="keyword">this</span>.canvas, that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">/* 清空雪花 */</span></span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; maxFlake; e++) &#123;</span><br><span class="line">        flakes[e].update();</span><br><span class="line">        flakes[e].render(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*  一帧一帧的画 */</span></span><br><span class="line">    <span class="keyword">this</span>.loop = requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        drawSnow.apply(that);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 调用及控制方法 */</span></span><br><span class="line"><span class="keyword">var</span> snow = <span class="keyword">new</span> snowFall(&#123;<span class="attr">maxFlake</span>:<span class="number">60</span>&#125;);</span><br><span class="line">snow.start();</span><br></pre></td></tr></table></figure><p>然后在 <code>\themes\next\layout\_layout.swig</code> 文件里<code>&lt;body&gt;&lt;/body&gt;</code>内部引用即可：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 雪花特效 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="keyword">var</span> windowWidth = $(<span class="built_in">window</span>).width();</span><br><span class="line">  <span class="keyword">if</span> (windowWidth &gt; <span class="number">480</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">'&lt;script type="text/javascript" src="/js/src/snow.js"&gt;&lt;\/script&gt;'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>请确保在你添加的代码上面已经引入了JQ，否则你还需要导入jq<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"//libs.baidu.com/jquery/1.8.3/jquery.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p></p><h3 id="添加天气插件"><a href="#添加天气插件" class="headerlink" title="添加天气插件"></a>添加天气插件</h3><p>网上有很多的天气插件，找了很久发现心知天气非常不错。<br>获取地址：<a href="https://www.seniverse.com/widget/get" target="_blank" rel="noopener">https://www.seniverse.com/widget/get</a></p><p>使用心知天气有两点必备条件：</p><ol><li>注册心知天气账号</li><li>博客绑定了域名</li></ol><p>如果你没有域名但是可以通过IP地址进行访问也是可以添加成功的。</p><p>下面说一下详细的过程：</p><h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><p>有账号之后,登录根据自己喜好配置插件。心知天气的自动适配功能非常的不错。<br><img src="https://i.loli.net/2019/01/07/5c32f266e786e.png" alt="配置心知.PNG"></p><h4 id="安装代码"><a href="#安装代码" class="headerlink" title="安装代码"></a>安装代码</h4><p>选择好配置之后，就可以获取心知的插件代码。获取到代码之后，在<code>\themes\next\layout\_partials\head\custom-head.swig</code>中添加获取的代码。之后就可以部署到Github上了。</p><p>吐槽一下，加载数独真的是很慢，特别是在移动端中，如果你希望你的站点访问速度快一点，建议还是不要为了功能，而放弃用户体验。</p><h3 id="添加CNZZ统计"><a href="#添加CNZZ统计" class="headerlink" title="添加CNZZ统计"></a>添加CNZZ统计</h3><p>刚开始弄NexT主题的时候，对一些配置还不是很明白，所以一直都不敢弄。<br>今天总算有点精神，就把友盟的统计给加上了。之前一直都是用不蒜子的统计，但是不蒜子统计的内容太过简单了，不能够看到其他的一些数据。</p><p>友盟+ 传送门：<a href="https://passport.umeng.com/login?appId=cnzz" target="_blank" rel="noopener">https://passport.umeng.com/login?appId=cnzz</a></p><h4 id="配置站点信息"><a href="#配置站点信息" class="headerlink" title="配置站点信息"></a>配置站点信息</h4><p>登录之后，选择右上角的添加站点，配置好你的站点信息</p><p><img src="https://i.loli.net/2019/01/07/5c32f21391b50.png" alt="cnzz添加站点.PNG"></p><h4 id="获取代码"><a href="#获取代码" class="headerlink" title="获取代码"></a>获取代码</h4><p>获取友盟提供给你的代码，友盟提供了很多的样式，随便复制一份就行。<br><img src="https://i.loli.net/2019/01/07/5c32f22e7156f.png" alt="cnzz代码.PNG"></p><p>在<code>\themes\next\layout\_third-party\analytics\cnzz-analytics.swig</code>中将原来的代码全部删除，复制下面的代码：<br><em>ps：如果没有该文件，请自行创建然后复制修改下面的代码</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.cnzz_siteid %&#125;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;!-- 填写你的友盟代码 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> cnzz_protocol = ((<span class="string">"https:"</span> == <span class="built_in">document</span>.location.protocol) ? <span class="string">" https://"</span> : <span class="string">" http://"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">unescape</span>(<span class="string">"%3Cspan id='cnzz_stat_icon_12'%3E%3C/span%3E%3Cscript </span></span><br><span class="line"><span class="string">src='"</span> + cnzz_protocol + <span class="string">"s19.cnzz.com/z_stat.php%3Fid%3D12%2show%3Dpic' </span></span><br><span class="line"><span class="string">type='text/javascript'%3E%3C/script%3E"</span>));</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;!-- 你的友盟代码 end --&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>添加了代码之后，还需要修改next的配置文件才能够生效。注意是<strong>主题配置文件</strong><br>打开<code>\themes\next</code>目录下的<code>_config.yml</code>，按<code>ctrl + F</code>搜索<code>CNZZ</code>,找到之后将注释的内容打开，并设置成true，注意空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CNZZ count</span></span><br><span class="line">cnzz_siteid: true</span><br></pre></td></tr></table></figure><p>这样就可以成功的使用CNZZ进行统计了。建议使用<code>hexo s</code>在本地测试，看是否有问题再部署上去。</p><h4 id="附赠"><a href="#附赠" class="headerlink" title="附赠"></a>附赠</h4><p>在我的博客中，部署友盟上去之后，发现移动端的footer顶上去了。<br><img src="https://i.loli.net/2019/01/07/5c32f24ab04e9.png" alt="css.PNG"><br>哭死: ( 写博客的时候，才发现不蒜子的统计居然变少了，原来不蒜子对域名前加www和不加www的网站是区分统计的。。。<br>算了，反正是佛系博主，随缘吧。。。。</p><p>打开<code>\themes\next\source\css\_custom</code>目录下的<code>custom.styl</code>，添加以下代码：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Custom styles.</span></span><br><span class="line"><span class="comment">//mobile style footer</span></span><br><span class="line">@media (max-width: <span class="number">767</span>px)</span><br><span class="line"> .content-wrap &#123;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">    padding: <span class="number">20</span>px;</span><br><span class="line">    min-height: auto;</span><br><span class="line">    margin-bottom: <span class="number">30</span>px;</span><br><span class="line">    border-radius: initial;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p></p><p>注意<code>.content-wrap</code>前面有一个空格，一定要添加，否则博客的样式就全乱了。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>不要脸的问一句，各位看官觉得网站怎么样？请在下方留言告诉我你的看法哦。<del>我也不一定会更改。。</del></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 12 2019 11:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近更新了一下站点的一些配置，让网站的趣味性有了一定的提升。主要做了一下几点更新。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;添加雪花效果&lt;/li&gt;&lt;li&gt;添加天气插件&lt;/li&gt;&lt;li&gt;加入CNZZ统计
    
    </summary>
    
      <category term="NexT" scheme="https://www.donlex.cn/categories/NexT/"/>
    
    
      <category term="hexo" scheme="https://www.donlex.cn/tags/hexo/"/>
    
      <category term="NexT" scheme="https://www.donlex.cn/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo接入Google AdSense广告</title>
    <link href="https://www.donlex.cn/archives/6102cfc3.html"/>
    <id>https://www.donlex.cn/archives/6102cfc3.html</id>
    <published>2019-01-02T04:55:58.000Z</published>
    <updated>2019-01-02T08:20:00.863Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --><blockquote class="blockquote-center"><p><strong>Don’t be evil</strong></p></blockquote><a id="more"></a><center><img src="https://i.loli.net/2019/01/02/5c2c451776ccd.png"></center><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>2019年开始，由于个人的博客站点已经建立几个月，一直安静地躺在那里做美男子。就想着接点小广告，赚一点睡后收入。于是搜索发现了Google AdSense ，发现它可以在hexo博客上挂上广告位进行展示，于是乎注册了一个账号，没想到今早通过了审核。<br>今天又弄了一下广告位的布局，总共commit了差不多10次左右，终于把广告位置排的比较合理了。</p><p>下面分享一下具体的执行步骤</p><h3 id="注册AdSense账号"><a href="#注册AdSense账号" class="headerlink" title="注册AdSense账号"></a>注册AdSense账号</h3><p>注册额链接：<a href="https://www.google.com/adsense/start/#/?modal_active=none" title="AdSense" target="_blank" rel="noopener">AdSense</a><br><em>ps:需要 V屁N（vpn），请自行找梯子。。。</em></p><p><img src="https://i.loli.net/2019/01/02/5c2c4779efb85.png" alt="注册.PNG"></p><p>点击“SIGN UP NOW”,进行注册。如果你有谷歌账号那就很方便了，直接点击右上角的“SIGN IN”就好。</p><p>详细的注册步骤就不多做介绍，注意填写信息的时候，一定要谨慎，否则可能审核通不过，这样大大的浪费了你的时间。</p><p>填写完信息之后，需要将谷歌提供的代码放置到你的博客中。请参考下一个步骤 <i class="fa fa-long-arrow-down" style="“color:red”" aria-hidden="true"></i><i class="fa fa-long-arrow-down" style="“color:red”" aria-hidden="true"></i><i class="fa fa-long-arrow-down" style="“color:red”" aria-hidden="true"></i></p><h3 id="添加广告代码"><a href="#添加广告代码" class="headerlink" title="添加广告代码"></a>添加广告代码</h3><p>AdSense要求要在 <code>&lt;head&gt;</code> 标记中添加了自动广告代码,只需在<code>\themes\next\layout\_partials\head.swig</code>中添加任意一个位置添加你获取到的代码。</p><p>例如：我将AdSense的代码和google分析的代码放置在一块,这样渲染的时候就会自动放置在某一个位置了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.google_site_verification %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google-site-verification"</span> <span class="attr">content</span>=<span class="string">"dYiRwj1ulGaUvTQRrCjJA9YKnNF8JN4wRKXzdbE6wBc"</span> /&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"><span class="comment">&lt;!-- 添加获取的代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"http://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">(adsbygoogle = window.adsbygoogle || []).push(&#123;</span></span><br><span class="line"><span class="undefined">google_ad_client: "ca-pub-123456789",</span></span><br><span class="line"><span class="undefined">enable_page_level_ads: true</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="静候结果"><a href="#静候结果" class="headerlink" title="静候结果"></a>静候结果</h3><p>添加了代码之后，如果顺利的话，google AdSense会发邮件到你注册的邮箱，在收到邮箱之后，登录AdSense,就可以而根据自己的博客站点选择相应的广告单元了。</p><p><img src="https://i.loli.net/2019/01/02/5c2c479026908.png" alt="ad.PNG"></p><h3 id="个性化配置博客"><a href="#个性化配置博客" class="headerlink" title="个性化配置博客"></a>个性化配置博客</h3><p>此处以 NexT 主题为例，介绍自定义配置的设置方式。</p><ol><li>新建 <code>theme/next/layout/_custom/google_adsense.swig</code>，将 AdSense 上的代码粘贴进去</li><li>在 <code>theme/next/layout/_custom/head.swig</code> 中也粘贴一份</li><li>如果在每篇博客里也想看到广告的话，在 <code>theme/next/layout/post.swig</code> 里中在希望看到的地方加上:</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include <span class="string">'_custom/google_adsense.swig'</span> %&#125;</span><br></pre></td></tr></table></figure><p>例如：我的博客中将一个自定义的广告快放置到了留言板下面<br>在<code>\themes\next\layout\_partials\comments.swig</code>中将提供的代码放置进去<br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    &#123;% elseif theme.valine_modify.appid and theme.valine_modify.appkey %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comments"</span> <span class="attr">id</span>=<span class="string">"comments"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="comment">&lt;!-- 添加的内容 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 方式一开始 --&gt;</span></span><br><span class="line">&#123;% include '_custom/google_adsense.swig' %&#125;</span><br><span class="line"><span class="comment">&lt;!-- 方式一开始 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 方式二开始 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- liuyanlan_test --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span> <span class="attr">class</span>=<span class="string">"adsbygoogle"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">style</span>=<span class="string">"display:block"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">data-ad-client</span>=<span class="string">"ca-pub-62682286883328"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">data-ad-slot</span>=<span class="string">"32555273"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">data-ad-format</span>=<span class="string">"auto"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">data-full-width-responsive</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">(adsbygoogle = <span class="built_in">window</span>.adsbygoogle || []).push(&#123;&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 方式二结束 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加内容结束 --&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p></p><p>此时如果 <code>hexo server</code> 的话是看不到广告的，因为 AdSense 的显示是 Google 控制的。</p><p>注意上面的两种方式只需要选择其中一种就可以了。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>在成功接入AdSense广告之后，有以下几点需要记住的。而且Google也会根据几种方式和数据判断广告点击是否作弊，<strong>从而注销你的账号</strong>。所以不要心存侥幸心理，好好发原创文章，提高网站的质量才是王道。</p><ol><li>作弊广告点击者的IP地址与你Adsense账户登录IP地址相同</li><li>作弊广告点击的CTR数据太高</li><li>作弊广告点击者的IP地址来自同一个地理区域</li><li>根据Cookies判断作弊Adsense广告点击</li><li>作弊广告点击者页面停留时间太短</li><li>直接访问者的广告点击率过高</li><li>流量小但广告点击率高</li><li>在网页上用文字提示请求鼓动点击广告</li></ol><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>虽然现在一般的个人博客站点流量一般都不大，但是有空余的地方放置一点广告还是能起到丰富博客的作用的。而且Google AdSense的广告相比百度联盟的还是比较优质的！</p><p>虽然赚不了几个<i class="fa fa-dollar" aria-hidden="true"></i>，但是养着一个广告也是不错，万一过几年再上AdSense看一下可能就已经达到100刀的提现额度了呢。这也算是一种增加睡后收入的方法。<i class="fa fa-smile-o" aria-hidden="true"></i></p><div class="note danger"><p>文章首发于慕课网：<a href="https://www.imooc.com/article/270946" target="_blank" rel="noopener">https://www.imooc.com/article/270946</a></p></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;strong&gt;Don’t be evil&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="NexT" scheme="https://www.donlex.cn/categories/NexT/"/>
    
    
      <category term="hexo" scheme="https://www.donlex.cn/tags/hexo/"/>
    
      <category term="NexT" scheme="https://www.donlex.cn/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Python包的管理利器pipenv</title>
    <link href="https://www.donlex.cn/archives/18ef6217.html"/>
    <id>https://www.donlex.cn/archives/18ef6217.html</id>
    <published>2019-01-01T02:09:00.000Z</published>
    <updated>2019-01-01T07:55:59.529Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --><p>大家都知道 <code>pip</code>（pip2、pip3分别对应python的2、3版本）是python的包管理工具，使得python的第三方包的安装等任务十分方便。另外，很多python的虚拟环境工具如<code>virtualenv</code>、<code>pyenv</code>等等都得到了广泛使用。</p><a id="more"></a><p>而pipenv是<code>requests</code>库作者<strong>Kenneth Reitz</strong>开发的，它结合了pip及<code>virtualenv</code>的功能和优点，其目的是替代<code>virtualenv</code>和<code>pyenv</code>，将<code>pip</code>及<code>virtualenv</code>的功能集于一身。</p><p>多说一句，尽管 pip 可以安装 Python 包，但仍推荐使用 <code>pipenv</code>，因为它是一种更高级的工具，可简化依赖关系管理的常见使用情况。如果还没有使用过<code>pipenv</code>的童鞋，赶紧试试吧！</p><h3 id="pipenv安装"><a href="#pipenv安装" class="headerlink" title="pipenv安装"></a>pipenv安装</h3><p>pipenv 的安装依赖 pip，如果没有配置好pip，安装pipenv还是有点麻烦的。如果配置好了pip的环境变量，在任意目录下都可以使用下面的命令安装</p><blockquote><p>pip install pipenv</p></blockquote><h3 id="pipenv使用方法"><a href="#pipenv使用方法" class="headerlink" title="pipenv使用方法"></a>pipenv使用方法</h3><table><thead><tr><th>命令名</th><th>命令</th></tr></thead><tbody><tr><td>创建pipenv</td><td>pipenv</td></tr><tr><td>启动pipenv</td><td>pipenv shell(若未存在虚拟环境会自动创建)</td></tr><tr><td>退出pipenv</td><td>exit</td></tr><tr><td>查找所有安装包</td><td>pip list</td></tr><tr><td>环境内包的依赖展示</td><td>pipenv graph</td></tr><tr><td>查找虚拟环境的路径</td><td>pipenv –venv</td></tr><tr><td>卸载安装包</td><td>pipenv uninstall</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>将目录更改为包含你的Python项目的文件夹，并启动Pipenv，</p><blockquote><p>cd my_project<br>pipenv install</p></blockquote><p>这将在项目目录中创建两个新文件: <code>Pipfile</code>和<code>Pipfile.lock</code>，如果项目不存在，则为项目创建一个新的虚拟环境。Pipfile包含关于项目的依赖包的信息，并取代通常在Python项目中使用的requirements.txt文件。</p><p><img src="https://i.loli.net/2019/01/01/5c2acc815ea79.png" alt="mkdir"></p><p>在上图中，使用了<code>mkdir</code>创建了文件夹PyProject，之后进入这个文件夹使用<code>pipenv install</code> 创建了虚拟环境。<br>由于默认的python版本是3的，所以创建的虚拟环境是py3。如果需要使用py2的话，可以添加参数进行创建。</p><blockquote><p>pipenv install - -two</p></blockquote><h3 id="激活虚拟环境："><a href="#激活虚拟环境：" class="headerlink" title="激活虚拟环境："></a>激活虚拟环境：</h3><blockquote><p>pipenv shell</p></blockquote><p>激活后，可以看到控制台输入那里已经标明虚拟环境了</p><p><img src="https://i.loli.net/2019/01/01/5c2acca750056.png" alt="shell"></p><h3 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h3><p>使用pipenv创建虚拟环境后，进入pipfile所在目录，使用install命令安装第三方库。 例如</p><blockquote><p>pipenv install requests</p></blockquote><p><img src="https://i.loli.net/2019/01/01/5c2accc1e1005.png" alt="install.PNG"></p><p>其实把pipenv当作pip来使用。无需像virtualenv那样需要额外的先启动虚拟环境。pipenv区分你是在给哪个虚拟环境安装，依赖的是Pipfile文件的位置。</p><h3 id="卸载第三方库"><a href="#卸载第三方库" class="headerlink" title="卸载第三方库"></a>卸载第三方库</h3><blockquote><p>pipenv uninstall requests</p></blockquote><h3 id="查看项目中安装的依赖"><a href="#查看项目中安装的依赖" class="headerlink" title="查看项目中安装的依赖"></a>查看项目中安装的依赖</h3><blockquote><p>pipenv graph</p></blockquote><p><img src="https://i.loli.net/2019/01/01/5c2accd2bdb7e.png" alt="graph.png"></p><h3 id="冻结Pipfile"><a href="#冻结Pipfile" class="headerlink" title="冻结Pipfile"></a>冻结Pipfile</h3><p>冻结就相当于将项目所使用的第三方库列表进行打包输出，类似于的<code>virtualenv</code>中生成<code>requirements.txt</code>文件。</p><p>通过更新<code>Pipfile.lock</code>来冻结库名称及其版本，以及其依赖关系的列表需要使用锁参数：</p><blockquote><p>pipenv lock</p></blockquote><p>如果另一个用户拷贝了你的项目，他们只需要安装Pipenv，然后：</p><blockquote><p>pipenv install</p></blockquote><p>pipenv会在项目文件夹下自动寻找Pipfile和Pipfile.lock文件，创建一个新的虚拟环境并安装必要的软件包。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>如果你在做web项目就会体会到pipenv的便利。一些包只支持py2，所以必须使用Python2，而现在都8102年了，大部分人都习惯py3了，所以用pipenv创建虚拟环境能够避免混乱，而且pipenv也比其他的一些管理工具更加人性化一点。</p><p>更多详细指令可以直接输入<code>pipenv</code>查看，或者查看官方文档。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 12 2019 11:21:59 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;大家都知道 &lt;code&gt;pip&lt;/code&gt;（pip2、pip3分别对应python的2、3版本）是python的包管理工具，使得python的第三方包的安装等任务十分方便。另外，很多python的虚拟环境工具如&lt;code&gt;virtualenv&lt;/code&gt;、&lt;code&gt;pyenv&lt;/code&gt;等等都得到了广泛使用。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://www.donlex.cn/categories/python/"/>
    
    
      <category term="python" scheme="https://www.donlex.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>我的2018总结</title>
    <link href="https://www.donlex.cn/archives/58a24148.html"/>
    <id>https://www.donlex.cn/archives/58a24148.html</id>
    <published>2018-12-31T03:45:59.000Z</published>
    <updated>2019-02-06T12:25:38.953Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Aug 12 2019 11:22:00 GMT+0800 (GMT+08:00) --><p>转眼间，这趟列车就要驶过2018这个站点了。在这一年里，我个人成长了很多，也收获了很多。感谢一直以来关注我的读者，是你们的支持，让我坚持到了现在。</p><a id="more"></a><p>其实我个人开始有意识的积累，应该是在2018年3月份之后。因为3月份那个时候，刚好受到多个公众号文章的影响，逐渐地开通了博客，之后不久才开通了公众号“<a href="https://mp.weixin.qq.com/s/XyaVEcVDqhBXrUXInThiKw" target="_blank" rel="noopener"><strong>Python绿洲</strong></a>”。</p><div align="center"><br><img src="https://i.loli.net/2018/12/31/5c2992769f289.jpg" width="150" height="150" align="center"><br><center><a href="https://mp.weixin.qq.com/s/XyaVEcVDqhBXrUXInThiKw" target="_blank" rel="noopener"><strong>Python绿洲</strong></a></center><br></div><p>下面就分享一下我个人在2018年的一些经历。</p><h3 id="3月份前的我：盲目生长"><a href="#3月份前的我：盲目生长" class="headerlink" title="3月份前的我：盲目生长"></a>3月份前的我：盲目生长</h3><p>在这段时间之前，我只是盲目的跟随学校的脚步，学着学校安排的课程，没有多么地刻苦勤奋，所以也没有取得多么好的成绩，感觉基本上都是在玩手机中度过了大学中最初的两年。可能在学校里，没有外面那么大的压力，对于就业也没有很好的急迫感，只是随波逐流而已。如果一直都过着学校的平静生活，没有意外的话，我应该就会成为<strong>毕业即失业</strong>的正面教材。</p><p>在3月份，大二下学期生活刚开始的时候，我逐渐有了一些想法：不想再这样浑浑噩噩下去了，我要改变现在这种颓废的状态。想要改变就要走出舒适区，让学校生活这一潭死水搅动起来。</p><p>也得益于大二的时候有学过一点Python的基本知识，让我找到了方向：在不放弃学校的Java方向的前提下，努力朝Python方向深入。</p><h3 id="3月份后的我：野蛮而向上"><a href="#3月份后的我：野蛮而向上" class="headerlink" title="3月份后的我：野蛮而向上"></a>3月份后的我：野蛮而向上</h3><h4 id="初识爬虫"><a href="#初识爬虫" class="headerlink" title="初识爬虫"></a>初识爬虫</h4><p>既然确定了方向，就要不断朝着这个方向努力。那个时候对Python的能干什么还很朦胧，没有什么想法，觉得无从下手。在跟一个比较聊得来的师兄的建议下，选择了从爬虫学起。<br>之后就通过看视频学习爬虫，不断地在网上找案例来练手。在学习的这段时间里，我基本都是在晚上2、3点之后才舍得去睡觉。在<strong>看视频–&gt;做案例–&gt;写博客</strong>的循环中，我能够很清楚地看到我的学习成果，每一天都让我充满了成就感，不断地鼓励我前进。或许这就是爬虫的魅力吧！<br>在将近一个月的学习下，让我的基本功得到了一定的增强。同时，这一个月也是我的<a href="https://blog.csdn.net/stormdony" target="_blank" rel="noopener"><strong>博客</strong></a>最高产的时候。</p><div align="center"><br><img src="https://i.loli.net/2018/12/31/5c29938d1c7f6.png" align="center"><br><center><a href="https://blog.csdn.net/stormdony" target="_blank" rel="noopener"><strong>博客归档</strong></a></center><br></div><h4 id="投稿文章"><a href="#投稿文章" class="headerlink" title="投稿文章"></a>投稿文章</h4><p>第一次投稿文章是在4月末，《后来的我们》刚上映后我就把豆瓣上的影评用selenium给爬了下来并写在了CSDN博客上。之后就发邮件投给<strong>菜鸟学python</strong>。邮件发出去几天都没有收到回复，本来以为没有希望的时候，收到了回复。非常的激动，也正是投稿的成功，让我坚定了继续学下去的决心。</p><p>其实说来有点惭愧，第一次投稿我是奔着稿费去的。作为农村的孩子，我是希望能够尽量少花父母的钱。虽然这次稿费不多，但这是依靠我自己学习的知识赚来的。</p><h4 id="更新公众号"><a href="#更新公众号" class="headerlink" title="更新公众号"></a>更新公众号</h4><p>在第一次投稿的文章：<strong>《 <a href="https://mp.weixin.qq.com/s/u8HMTv5V_39unAgTDCumzw" target="_blank" rel="noopener">爬取豆瓣短评，刘若英导演的电影&lt;后来的我们&gt;发现爱情原来是这样</a>》</strong>发布之后，我开始慢慢地将博客中的文章搬过来公众号，并且写一些文章发在公众号。</p><p>前期文章的内容杂乱、排版都不够美观。后来在慢慢的接触、模仿一些优秀的公众号文章下，逐步改进了这些缺点。<br>公众号的文章都是在学习之余抽空写出来的，有时候一篇文章就花了好几个小时，所以更新的频率不高，但现在也慢慢地积累了70多篇文章。</p><p>在有比较好的想法的时候，努力将这些想法实现，然后写成文章记录下来，并向比较知名的公众号投稿。其实现在大部分的关注者应该都是通过其他公众号流过来的。</p><p>由于没有增长黑客的概念和本身不够优秀的原因，导致公众号的关注人数一直不温不火。</p><h4 id="不断学习"><a href="#不断学习" class="headerlink" title="不断学习"></a>不断学习</h4><p>在学习爬虫两个月也就是7月份之后，因为受够了爬取页面的结构不断地改变和反爬措施的不断升级，对爬虫产生了厌烦。我开始转向web方向，学习了Django和Flask，同时还在了解了一些数据分析与机器学习的内容，参加了科赛的机器学习训练营。在不断深入学习的过程中，我体会到了一个本科生知识局限性，而且真的是少的可怜，不得不放慢脚步，回头恶补高数、线代等知识。<br>一直到现在，我都还在慢慢的学习的路上，虽然进展缓慢，但是还是希望能够坚持下去吧！</p><h4 id="自建博客站点"><a href="#自建博客站点" class="headerlink" title="自建博客站点"></a>自建博客站点</h4><p>在9月份左右，萌生了自己搭建博客的想法。于是，不断实践，学会了使用hexo搭建博客，学会了域名的分配与配置，学会了博客主题的个性化设置。在搭建的过程中，遇到了很多困难，也通过不断地搜索、实践，逐步养成了解决问题的正确习惯：<strong>关键字百度谷歌</strong>。相信这些路上的绊脚石，会成为我的垫脚石，不断提高自身实力。</p><div align="center"><br><img src="https://i.loli.net/2018/12/31/5c2993fd10569.png" align="center"><br><center><strong>域名购买</strong></center><br></div><p>现在 <strong><a href="https://donlex.cn" target="_blank" rel="noopener">https://donlex.cn</a></strong> 这个站点建站已经有3个月了，文章还没有发多少。</p><h3 id="展望2019"><a href="#展望2019" class="headerlink" title="展望2019"></a>展望2019</h3><p>其实，我对于未来现在还没有什么规划，真的，可能是还没有踏入社会的原因吧。但是现在大三了，心里也总是会有一些焦虑的。我现在只希望在即将到来的19年里，能够找到自己的方向，并踏踏实实地提升自己的认知水平和专业能力吧！</p><p>至于博客和公众号，我会继续坚持下去。学习之余，我会尽可分享更多对大家有帮助的文章。在这里我不敢做什么保证。另外多说一句，经营一个公众号真的很不容易，写原创文章更是不容易。</p><p>就到这里吧，希望大家2019都能够更进一个台阶！感谢一直以来支持我的朋友，薛薛你们！</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 12 2019 11:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;转眼间，这趟列车就要驶过2018这个站点了。在这一年里，我个人成长了很多，也收获了很多。感谢一直以来关注我的读者，是你们的支持，让我坚持到了现在。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://www.donlex.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://www.donlex.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>通过猎聘的招聘信息找出学习线路规划</title>
    <link href="https://www.donlex.cn/archives/8a901d69.html"/>
    <id>https://www.donlex.cn/archives/8a901d69.html</id>
    <published>2018-12-10T04:48:42.000Z</published>
    <updated>2018-12-10T05:10:50.417Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- build time:Mon Aug 12 2019 11:22:00 GMT+0800 (GMT+08:00) --><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于微信公众号：Python绿洲 。如需转载，请联系该公众号</span><br></pre></td></tr></table></figure><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前发过一篇文章<a href="https://blog.csdn.net/stormdony/article/details/82586735" target="_blank" rel="noopener">《 Python or Java？Boss直聘告诉你该如何选择》</a>, 主要是这两种语言方向在应聘岗位上的比较，没有涉及具体的岗位要求的分析。前两天，刚好看到网上的一些学习路线图，又对比了招聘网站上的要求，发现这两者其实差不多。<br><a id="more"></a><br>所以就用爬虫爬取了猎聘网上的岗位信息，对这些招聘信息进行处理，从中找出需要掌握的一些语言和工具，从而有目的地进行学习，更快的提高自己的能力，让自己不再因为不知道学习的线路而烦恼，也能够符合招聘的要求。</p><h3 id="查看网页"><a href="#查看网页" class="headerlink" title="查看网页"></a>查看网页</h3><p><img src="https://i.loli.net/2018/12/10/5c0df123ac4d9.png" alt="index"></p><p><center>(搜索首页)</center><br><img src="https://i.loli.net/2018/12/10/5c0df13aa6e7f.png" alt="detail"></p><p><center>(岗位要求)</center><br>从这个岗位职责中，可以看出需要掌握的工具或语言绝大多数都是以英文为主。所以主要提取英文就行了。至于其他的信息就不进行提取了</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>爬取搜索到的岗位链接</li><li>进一步爬取详细的岗位要求</li><li>提取其中英文单词</li><li>pyecharts展示</li></ol><h3 id="爬取招聘岗位"><a href="#爬取招聘岗位" class="headerlink" title="爬取招聘岗位"></a>爬取招聘岗位</h3><p>使用<code>beautifulsoup</code>进行解析,主要将岗位名称，详细链接，公司，薪资，位置和学历要求这几个信息存到<code>MongoDB</code>中就好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLink</span><span class="params">(seachname, pagenum)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(pagenum):</span><br><span class="line">        url = <span class="string">"https://www.liepin.com/zhaopin/?init=-1&amp;key=&#123;&#125;&amp;curPage=&#123;&#125;"</span>.format(</span><br><span class="line">            seachname, i)</span><br><span class="line">        web_data = requests.get(url=url, headers=header)</span><br><span class="line">        soup = BeautifulSoup(web_data.content, <span class="string">'lxml'</span>)</span><br><span class="line">        job_list = soup.select(<span class="string">".sojob-list &gt; li"</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> job_list:</span><br><span class="line">            name = item.select(<span class="string">".job-info &gt; h3"</span>)[<span class="number">0</span>][<span class="string">'title'</span>]</span><br><span class="line">            link = item.select(<span class="string">".job-info &gt; h3 &gt; a"</span>)[<span class="number">0</span>][<span class="string">'href'</span>]</span><br><span class="line">            company = item.select(<span class="string">".company-name &gt; a"</span>)[<span class="number">0</span>].text</span><br><span class="line">            salary = item.select(<span class="string">".text-warning"</span>)[<span class="number">0</span>].text</span><br><span class="line">            location = item.select(<span class="string">".area"</span>)[<span class="number">0</span>].text</span><br><span class="line">            education = item.select(<span class="string">".edu"</span>)[<span class="number">0</span>].text</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">"title"</span>: name,</span><br><span class="line">                <span class="string">"link"</span>: link,</span><br><span class="line">                <span class="string">"company"</span>: company,</span><br><span class="line">                <span class="string">"salary"</span>: salary,</span><br><span class="line">                <span class="string">"location"</span>: location,</span><br><span class="line">                <span class="string">"education"</span>: education,</span><br><span class="line">            &#125;</span><br><span class="line">            pywork.insert(data) <span class="comment">#使用MongoDB存储</span></span><br></pre></td></tr></table></figure><h3 id="详细岗位要求"><a href="#详细岗位要求" class="headerlink" title="详细岗位要求"></a>详细岗位要求</h3><p>由于任职要求中有<code>&lt;br&gt;</code>标签，需要将其切除，而且由于使用<code>beautifulsoup</code>解析，所以<code>&lt;br&gt;</code>是tag对象，需要创建对象再删除。被这个问题困住了好久。<br>之后将所有爬取到的岗位要求都写到一个文件中，方便后期使用<code>jieba</code>切分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getInfo</span><span class="params">(url, demands_text)</span>:</span></span><br><span class="line">    web_data = requests.get(url, headers=header)</span><br><span class="line">    soup = BeautifulSoup(web_data.content, <span class="string">'lxml'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        demands = soup.select(<span class="string">".content-word"</span>)[<span class="number">0</span>].contents</span><br><span class="line">        demands = sorted(set(demands), key=demands.index)</span><br><span class="line">        <span class="comment"># 删除&lt;br/&gt;</span></span><br><span class="line">        delete_str = <span class="string">"&lt;br/&gt;"</span></span><br><span class="line">        br_tag = BeautifulSoup(delete_str, <span class="string">"lxml"</span>).br</span><br><span class="line">        demands.remove(br_tag)</span><br><span class="line">        <span class="comment"># 拼接所有要求</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> demands:</span><br><span class="line">            demands_text += item.replace(<span class="string">"\r"</span>, <span class="string">""</span>)</span><br><span class="line">        <span class="comment">#写入文件</span></span><br><span class="line">        f = open(<span class="string">'demands.txt'</span>, mode=<span class="string">'a+'</span>, encoding=<span class="string">'UTF-8'</span>)</span><br><span class="line">        f.write(demands_text + <span class="string">"\n"</span>)</span><br><span class="line">        f.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        logging.log(<span class="string">"warning..."</span>)</span><br></pre></td></tr></table></figure><h3 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h3><p>使用<code>jieba</code>分词之后，还需要将一些单词例如：or，pc等上删除，本着“宁可错杀一千,不可放过一个”的原则，所以将少于1个字母的单词使用正则去掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CutWordByJieBa</span><span class="params">(txt, seachname)</span>:</span></span><br><span class="line">    seg_list = jieba.cut(txt, cut_all=<span class="keyword">True</span>)</span><br><span class="line">    w1 = <span class="string">"/ "</span>.join(seg_list)  <span class="comment"># 全模式</span></span><br><span class="line">    fil = re.findall(<span class="string">'[a-zA-Z]&#123;1,&#125;/'</span>, w1) <span class="comment"># 提取英文</span></span><br><span class="line">    strl = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> fil:</span><br><span class="line">        strl += i</span><br><span class="line">    strl = strl.lower() <span class="comment"># 全部转换为小写</span></span><br></pre></td></tr></table></figure><h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3><p>在这部分，之前只想着将需要掌握的工具用词云进行展示就好。然而，有点幸运呀！当使用<code>Navicat12</code>连接到<code>MongoDB</code>的时候，发现它有自动作图分析的功能。所以先用Navicat中的功能，简单的来看一下总体情况：</p><p>以爬虫工程师为关键词查询后，使用pyecharts进行数据展示<br><img src="https://i.loli.net/2018/12/10/5c0df15de25ce.png" alt="company"></p><p><img src="https://i.loli.net/2018/12/10/5c0df16ba75f9.png" alt="edu"><br><img src="https://i.loli.net/2018/12/10/5c0df1793350b.png" alt="salary"><br><strong>重点</strong><br><img src="https://i.loli.net/2018/12/10/5c0df18fce366.png" alt="wordcould"><br><img src="https://i.loli.net/2018/12/10/5c0df19adf20d.png" alt="bar"></p><p>个人感觉词云更加准确，不过词云和<code>bar</code>图处理方式都是一样的，只是表现形式不一样而已。从柱状图中可以看出需要掌握的工具可以分为三类：</p><ol><li>数据库：mysql、oracle、mongodb</li><li>解析：xpath、css</li><li>反爬：cookie、ip、scrapy、jwt</li></ol><p>其中<code>jwt</code>(JSON Web Token) 我就不认识。所以通过这种方式，我就可以找到自己的盲区，就算不深入了解学习，但是百度一下，大概知道它是什么，还是可以的嘛</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>如果有感兴趣的小伙伴，可以自己动手试一下。个人感觉这些排名前10的工具对自己的职业规划还是有点帮助的，也希望能够对你有所帮助！</p><p>github地址：<a href="https://github.com/stormdony/python_demo/tree/master/LiePin" target="_blank" rel="noopener">https://github.com/stormdony/python_demo/tree/master/LiePin</a></p><p>欢迎关注微信公众号：<a href="https://mp.weixin.qq.com/s/XyaVEcVDqhBXrUXInThiKw" target="_blank" rel="noopener">Python绿洲</a>，获取更多内容！</p><blockquote><p>文章首发于微信公众号：<strong>Python绿洲</strong> 。如需转载，请联系该公众号</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 12 2019 11:22:00 GMT+0800 (GMT+08:00) --&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;文章首发于微信公众号：Python绿洲 。如需转载，请联系该公众号&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;之前发过一篇文章&lt;a href=&quot;https://blog.csdn.net/stormdony/article/details/82586735&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《 Python or Java？Boss直聘告诉你该如何选择》&lt;/a&gt;, 主要是这两种语言方向在应聘岗位上的比较，没有涉及具体的岗位要求的分析。前两天，刚好看到网上的一些学习路线图，又对比了招聘网站上的要求，发现这两者其实差不多。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://www.donlex.cn/tags/python/"/>
    
  </entry>
  
</feed>
